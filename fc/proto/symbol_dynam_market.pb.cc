// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symbol_dynam_market.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "symbol_dynam_market.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chaos_data {
class SymbolDynamMarketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolDynamMarket>
     _instance;
} _SymbolDynamMarket_default_instance_;

namespace protobuf_symbol_5fdynam_5fmarket_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, current_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, open_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, high_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, low_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, new_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, inner_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, tick_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, buy_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, buy_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, sell_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, sell_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolDynamMarket, settle_price_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  8,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(SymbolDynamMarket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolDynamMarket_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "symbol_dynam_market.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SymbolDynamMarket_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolDynamMarket_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031symbol_dynam_market.proto\022\nchaos_data\""
      "\265\002\n\021SymbolDynamMarket\022\024\n\014current_time\030\001 "
      "\002(\004\022\022\n\nopen_price\030\002 \002(\r\022\022\n\nhigh_price\030\003 "
      "\002(\r\022\021\n\tlow_price\030\004 \002(\r\022\021\n\tnew_price\030\005 \002("
      "\r\022\016\n\006volume\030\006 \002(\r\022\016\n\006amount\030\007 \002(\004\022\021\n\tinn"
      "er_vol\030\010 \002(\004\022\022\n\ntick_count\030\t \002(\r\022\021\n\tbuy_"
      "price\030\n \003(\r\022\017\n\007buy_vol\030\013 \003(\r\022\022\n\nsell_pri"
      "ce\030\014 \003(\r\022\020\n\010sell_vol\030\r \003(\r\022\025\n\ropen_inter"
      "est\030\036 \002(\r\022\024\n\014settle_price\030\037 \002(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "symbol_dynam_market.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_symbol_5fdynam_5fmarket_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolDynamMarket::kCurrentTimeFieldNumber;
const int SymbolDynamMarket::kOpenPriceFieldNumber;
const int SymbolDynamMarket::kHighPriceFieldNumber;
const int SymbolDynamMarket::kLowPriceFieldNumber;
const int SymbolDynamMarket::kNewPriceFieldNumber;
const int SymbolDynamMarket::kVolumeFieldNumber;
const int SymbolDynamMarket::kAmountFieldNumber;
const int SymbolDynamMarket::kInnerVolFieldNumber;
const int SymbolDynamMarket::kTickCountFieldNumber;
const int SymbolDynamMarket::kBuyPriceFieldNumber;
const int SymbolDynamMarket::kBuyVolFieldNumber;
const int SymbolDynamMarket::kSellPriceFieldNumber;
const int SymbolDynamMarket::kSellVolFieldNumber;
const int SymbolDynamMarket::kOpenInterestFieldNumber;
const int SymbolDynamMarket::kSettlePriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolDynamMarket::SymbolDynamMarket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fdynam_5fmarket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolDynamMarket)
}
SymbolDynamMarket::SymbolDynamMarket(const SymbolDynamMarket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      buy_price_(from.buy_price_),
      buy_vol_(from.buy_vol_),
      sell_price_(from.sell_price_),
      sell_vol_(from.sell_vol_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_time_, &from.current_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&settle_price_) -
    reinterpret_cast<char*>(&current_time_)) + sizeof(settle_price_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolDynamMarket)
}

void SymbolDynamMarket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&current_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settle_price_) -
      reinterpret_cast<char*>(&current_time_)) + sizeof(settle_price_));
}

SymbolDynamMarket::~SymbolDynamMarket() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolDynamMarket)
  SharedDtor();
}

void SymbolDynamMarket::SharedDtor() {
}

void SymbolDynamMarket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolDynamMarket::descriptor() {
  protobuf_symbol_5fdynam_5fmarket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fdynam_5fmarket_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolDynamMarket& SymbolDynamMarket::default_instance() {
  protobuf_symbol_5fdynam_5fmarket_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolDynamMarket* SymbolDynamMarket::New(::google::protobuf::Arena* arena) const {
  SymbolDynamMarket* n = new SymbolDynamMarket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolDynamMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolDynamMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_price_.Clear();
  buy_vol_.Clear();
  sell_price_.Clear();
  sell_vol_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&current_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tick_count_) -
        reinterpret_cast<char*>(&current_time_)) + sizeof(tick_count_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&inner_vol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&settle_price_) -
        reinterpret_cast<char*>(&inner_vol_)) + sizeof(settle_price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolDynamMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolDynamMarket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 current_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_current_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 open_price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_open_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 high_price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_high_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 low_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_low_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 new_price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_new_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 inner_vol = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_inner_vol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inner_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 tick_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_tick_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 buy_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_buy_price())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buy_price())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 buy_vol = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88u, input, this->mutable_buy_vol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buy_vol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sell_price = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96u, input, this->mutable_sell_price())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sell_price())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sell_vol = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_sell_vol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sell_vol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 open_interest = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 settle_price = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_settle_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settle_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolDynamMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolDynamMarket)
  return false;
#undef DO_
}

void SymbolDynamMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolDynamMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 current_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->current_time(), output);
  }

  // required uint32 open_price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->open_price(), output);
  }

  // required uint32 high_price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->high_price(), output);
  }

  // required uint32 low_price = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->low_price(), output);
  }

  // required uint32 new_price = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_price(), output);
  }

  // required uint32 volume = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->volume(), output);
  }

  // required uint64 amount = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->amount(), output);
  }

  // required uint64 inner_vol = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->inner_vol(), output);
  }

  // required uint32 tick_count = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tick_count(), output);
  }

  // repeated uint32 buy_price = 10;
  for (int i = 0, n = this->buy_price_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->buy_price(i), output);
  }

  // repeated uint32 buy_vol = 11;
  for (int i = 0, n = this->buy_vol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->buy_vol(i), output);
  }

  // repeated uint32 sell_price = 12;
  for (int i = 0, n = this->sell_price_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->sell_price(i), output);
  }

  // repeated uint32 sell_vol = 13;
  for (int i = 0, n = this->sell_vol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->sell_vol(i), output);
  }

  // required uint32 open_interest = 30;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->open_interest(), output);
  }

  // required uint32 settle_price = 31;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->settle_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolDynamMarket)
}

::google::protobuf::uint8* SymbolDynamMarket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolDynamMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 current_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->current_time(), target);
  }

  // required uint32 open_price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->open_price(), target);
  }

  // required uint32 high_price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->high_price(), target);
  }

  // required uint32 low_price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->low_price(), target);
  }

  // required uint32 new_price = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_price(), target);
  }

  // required uint32 volume = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->volume(), target);
  }

  // required uint64 amount = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->amount(), target);
  }

  // required uint64 inner_vol = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->inner_vol(), target);
  }

  // required uint32 tick_count = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tick_count(), target);
  }

  // repeated uint32 buy_price = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->buy_price_, target);

  // repeated uint32 buy_vol = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(11, this->buy_vol_, target);

  // repeated uint32 sell_price = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(12, this->sell_price_, target);

  // repeated uint32 sell_vol = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->sell_vol_, target);

  // required uint32 open_interest = 30;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->open_interest(), target);
  }

  // required uint32 settle_price = 31;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->settle_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolDynamMarket)
  return target;
}

size_t SymbolDynamMarket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chaos_data.SymbolDynamMarket)
  size_t total_size = 0;

  if (has_current_time()) {
    // required uint64 current_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->current_time());
  }

  if (has_open_price()) {
    // required uint32 open_price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open_price());
  }

  if (has_high_price()) {
    // required uint32 high_price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_price());
  }

  if (has_low_price()) {
    // required uint32 low_price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_price());
  }

  if (has_new_price()) {
    // required uint32 new_price = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_price());
  }

  if (has_amount()) {
    // required uint64 amount = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  if (has_volume()) {
    // required uint32 volume = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume());
  }

  if (has_tick_count()) {
    // required uint32 tick_count = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tick_count());
  }

  if (has_inner_vol()) {
    // required uint64 inner_vol = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->inner_vol());
  }

  if (has_open_interest()) {
    // required uint32 open_interest = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open_interest());
  }

  if (has_settle_price()) {
    // required uint32 settle_price = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->settle_price());
  }

  return total_size;
}
size_t SymbolDynamMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolDynamMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required uint64 current_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->current_time());

    // required uint32 open_price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open_price());

    // required uint32 high_price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_price());

    // required uint32 low_price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_price());

    // required uint32 new_price = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_price());

    // required uint64 amount = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());

    // required uint32 volume = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume());

    // required uint32 tick_count = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tick_count());

    // required uint64 inner_vol = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->inner_vol());

    // required uint32 open_interest = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open_interest());

    // required uint32 settle_price = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->settle_price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 buy_price = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->buy_price_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->buy_price_size());
    total_size += data_size;
  }

  // repeated uint32 buy_vol = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->buy_vol_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->buy_vol_size());
    total_size += data_size;
  }

  // repeated uint32 sell_price = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sell_price_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sell_price_size());
    total_size += data_size;
  }

  // repeated uint32 sell_vol = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sell_vol_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sell_vol_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolDynamMarket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolDynamMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolDynamMarket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolDynamMarket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolDynamMarket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolDynamMarket)
    MergeFrom(*source);
  }
}

void SymbolDynamMarket::MergeFrom(const SymbolDynamMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolDynamMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_price_.MergeFrom(from.buy_price_);
  buy_vol_.MergeFrom(from.buy_vol_);
  sell_price_.MergeFrom(from.sell_price_);
  sell_vol_.MergeFrom(from.sell_vol_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      current_time_ = from.current_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      open_price_ = from.open_price_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_price_ = from.high_price_;
    }
    if (cached_has_bits & 0x00000008u) {
      low_price_ = from.low_price_;
    }
    if (cached_has_bits & 0x00000010u) {
      new_price_ = from.new_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000040u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      tick_count_ = from.tick_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      inner_vol_ = from.inner_vol_;
    }
    if (cached_has_bits & 0x00000200u) {
      open_interest_ = from.open_interest_;
    }
    if (cached_has_bits & 0x00000400u) {
      settle_price_ = from.settle_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolDynamMarket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolDynamMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolDynamMarket::CopyFrom(const SymbolDynamMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolDynamMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolDynamMarket::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void SymbolDynamMarket::Swap(SymbolDynamMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolDynamMarket::InternalSwap(SymbolDynamMarket* other) {
  using std::swap;
  buy_price_.InternalSwap(&other->buy_price_);
  buy_vol_.InternalSwap(&other->buy_vol_);
  sell_price_.InternalSwap(&other->sell_price_);
  sell_vol_.InternalSwap(&other->sell_vol_);
  swap(current_time_, other->current_time_);
  swap(open_price_, other->open_price_);
  swap(high_price_, other->high_price_);
  swap(low_price_, other->low_price_);
  swap(new_price_, other->new_price_);
  swap(amount_, other->amount_);
  swap(volume_, other->volume_);
  swap(tick_count_, other->tick_count_);
  swap(inner_vol_, other->inner_vol_);
  swap(open_interest_, other->open_interest_);
  swap(settle_price_, other->settle_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolDynamMarket::GetMetadata() const {
  protobuf_symbol_5fdynam_5fmarket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fdynam_5fmarket_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolDynamMarket

// required uint64 current_time = 1;
bool SymbolDynamMarket::has_current_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolDynamMarket::set_has_current_time() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolDynamMarket::clear_has_current_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolDynamMarket::clear_current_time() {
  current_time_ = GOOGLE_ULONGLONG(0);
  clear_has_current_time();
}
::google::protobuf::uint64 SymbolDynamMarket::current_time() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.current_time)
  return current_time_;
}
void SymbolDynamMarket::set_current_time(::google::protobuf::uint64 value) {
  set_has_current_time();
  current_time_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.current_time)
}

// required uint32 open_price = 2;
bool SymbolDynamMarket::has_open_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolDynamMarket::set_has_open_price() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolDynamMarket::clear_has_open_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolDynamMarket::clear_open_price() {
  open_price_ = 0u;
  clear_has_open_price();
}
::google::protobuf::uint32 SymbolDynamMarket::open_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.open_price)
  return open_price_;
}
void SymbolDynamMarket::set_open_price(::google::protobuf::uint32 value) {
  set_has_open_price();
  open_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.open_price)
}

// required uint32 high_price = 3;
bool SymbolDynamMarket::has_high_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolDynamMarket::set_has_high_price() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolDynamMarket::clear_has_high_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolDynamMarket::clear_high_price() {
  high_price_ = 0u;
  clear_has_high_price();
}
::google::protobuf::uint32 SymbolDynamMarket::high_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.high_price)
  return high_price_;
}
void SymbolDynamMarket::set_high_price(::google::protobuf::uint32 value) {
  set_has_high_price();
  high_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.high_price)
}

// required uint32 low_price = 4;
bool SymbolDynamMarket::has_low_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolDynamMarket::set_has_low_price() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolDynamMarket::clear_has_low_price() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolDynamMarket::clear_low_price() {
  low_price_ = 0u;
  clear_has_low_price();
}
::google::protobuf::uint32 SymbolDynamMarket::low_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.low_price)
  return low_price_;
}
void SymbolDynamMarket::set_low_price(::google::protobuf::uint32 value) {
  set_has_low_price();
  low_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.low_price)
}

// required uint32 new_price = 5;
bool SymbolDynamMarket::has_new_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolDynamMarket::set_has_new_price() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolDynamMarket::clear_has_new_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolDynamMarket::clear_new_price() {
  new_price_ = 0u;
  clear_has_new_price();
}
::google::protobuf::uint32 SymbolDynamMarket::new_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.new_price)
  return new_price_;
}
void SymbolDynamMarket::set_new_price(::google::protobuf::uint32 value) {
  set_has_new_price();
  new_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.new_price)
}

// required uint32 volume = 6;
bool SymbolDynamMarket::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SymbolDynamMarket::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
void SymbolDynamMarket::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
void SymbolDynamMarket::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
::google::protobuf::uint32 SymbolDynamMarket::volume() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.volume)
  return volume_;
}
void SymbolDynamMarket::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.volume)
}

// required uint64 amount = 7;
bool SymbolDynamMarket::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SymbolDynamMarket::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
void SymbolDynamMarket::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
void SymbolDynamMarket::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
::google::protobuf::uint64 SymbolDynamMarket::amount() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.amount)
  return amount_;
}
void SymbolDynamMarket::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.amount)
}

// required uint64 inner_vol = 8;
bool SymbolDynamMarket::has_inner_vol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SymbolDynamMarket::set_has_inner_vol() {
  _has_bits_[0] |= 0x00000100u;
}
void SymbolDynamMarket::clear_has_inner_vol() {
  _has_bits_[0] &= ~0x00000100u;
}
void SymbolDynamMarket::clear_inner_vol() {
  inner_vol_ = GOOGLE_ULONGLONG(0);
  clear_has_inner_vol();
}
::google::protobuf::uint64 SymbolDynamMarket::inner_vol() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.inner_vol)
  return inner_vol_;
}
void SymbolDynamMarket::set_inner_vol(::google::protobuf::uint64 value) {
  set_has_inner_vol();
  inner_vol_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.inner_vol)
}

// required uint32 tick_count = 9;
bool SymbolDynamMarket::has_tick_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SymbolDynamMarket::set_has_tick_count() {
  _has_bits_[0] |= 0x00000080u;
}
void SymbolDynamMarket::clear_has_tick_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void SymbolDynamMarket::clear_tick_count() {
  tick_count_ = 0u;
  clear_has_tick_count();
}
::google::protobuf::uint32 SymbolDynamMarket::tick_count() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.tick_count)
  return tick_count_;
}
void SymbolDynamMarket::set_tick_count(::google::protobuf::uint32 value) {
  set_has_tick_count();
  tick_count_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.tick_count)
}

// repeated uint32 buy_price = 10;
int SymbolDynamMarket::buy_price_size() const {
  return buy_price_.size();
}
void SymbolDynamMarket::clear_buy_price() {
  buy_price_.Clear();
}
::google::protobuf::uint32 SymbolDynamMarket::buy_price(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.buy_price)
  return buy_price_.Get(index);
}
void SymbolDynamMarket::set_buy_price(int index, ::google::protobuf::uint32 value) {
  buy_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.buy_price)
}
void SymbolDynamMarket::add_buy_price(::google::protobuf::uint32 value) {
  buy_price_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolDynamMarket.buy_price)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolDynamMarket::buy_price() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolDynamMarket.buy_price)
  return buy_price_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolDynamMarket::mutable_buy_price() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolDynamMarket.buy_price)
  return &buy_price_;
}

// repeated uint32 buy_vol = 11;
int SymbolDynamMarket::buy_vol_size() const {
  return buy_vol_.size();
}
void SymbolDynamMarket::clear_buy_vol() {
  buy_vol_.Clear();
}
::google::protobuf::uint32 SymbolDynamMarket::buy_vol(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.buy_vol)
  return buy_vol_.Get(index);
}
void SymbolDynamMarket::set_buy_vol(int index, ::google::protobuf::uint32 value) {
  buy_vol_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.buy_vol)
}
void SymbolDynamMarket::add_buy_vol(::google::protobuf::uint32 value) {
  buy_vol_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolDynamMarket.buy_vol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolDynamMarket::buy_vol() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolDynamMarket.buy_vol)
  return buy_vol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolDynamMarket::mutable_buy_vol() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolDynamMarket.buy_vol)
  return &buy_vol_;
}

// repeated uint32 sell_price = 12;
int SymbolDynamMarket::sell_price_size() const {
  return sell_price_.size();
}
void SymbolDynamMarket::clear_sell_price() {
  sell_price_.Clear();
}
::google::protobuf::uint32 SymbolDynamMarket::sell_price(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.sell_price)
  return sell_price_.Get(index);
}
void SymbolDynamMarket::set_sell_price(int index, ::google::protobuf::uint32 value) {
  sell_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.sell_price)
}
void SymbolDynamMarket::add_sell_price(::google::protobuf::uint32 value) {
  sell_price_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolDynamMarket.sell_price)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolDynamMarket::sell_price() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolDynamMarket.sell_price)
  return sell_price_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolDynamMarket::mutable_sell_price() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolDynamMarket.sell_price)
  return &sell_price_;
}

// repeated uint32 sell_vol = 13;
int SymbolDynamMarket::sell_vol_size() const {
  return sell_vol_.size();
}
void SymbolDynamMarket::clear_sell_vol() {
  sell_vol_.Clear();
}
::google::protobuf::uint32 SymbolDynamMarket::sell_vol(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.sell_vol)
  return sell_vol_.Get(index);
}
void SymbolDynamMarket::set_sell_vol(int index, ::google::protobuf::uint32 value) {
  sell_vol_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.sell_vol)
}
void SymbolDynamMarket::add_sell_vol(::google::protobuf::uint32 value) {
  sell_vol_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolDynamMarket.sell_vol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolDynamMarket::sell_vol() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolDynamMarket.sell_vol)
  return sell_vol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolDynamMarket::mutable_sell_vol() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolDynamMarket.sell_vol)
  return &sell_vol_;
}

// required uint32 open_interest = 30;
bool SymbolDynamMarket::has_open_interest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SymbolDynamMarket::set_has_open_interest() {
  _has_bits_[0] |= 0x00000200u;
}
void SymbolDynamMarket::clear_has_open_interest() {
  _has_bits_[0] &= ~0x00000200u;
}
void SymbolDynamMarket::clear_open_interest() {
  open_interest_ = 0u;
  clear_has_open_interest();
}
::google::protobuf::uint32 SymbolDynamMarket::open_interest() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.open_interest)
  return open_interest_;
}
void SymbolDynamMarket::set_open_interest(::google::protobuf::uint32 value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.open_interest)
}

// required uint32 settle_price = 31;
bool SymbolDynamMarket::has_settle_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SymbolDynamMarket::set_has_settle_price() {
  _has_bits_[0] |= 0x00000400u;
}
void SymbolDynamMarket::clear_has_settle_price() {
  _has_bits_[0] &= ~0x00000400u;
}
void SymbolDynamMarket::clear_settle_price() {
  settle_price_ = 0u;
  clear_has_settle_price();
}
::google::protobuf::uint32 SymbolDynamMarket::settle_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolDynamMarket.settle_price)
  return settle_price_;
}
void SymbolDynamMarket::set_settle_price(::google::protobuf::uint32 value) {
  set_has_settle_price();
  settle_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolDynamMarket.settle_price)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chaos_data

// @@protoc_insertion_point(global_scope)
