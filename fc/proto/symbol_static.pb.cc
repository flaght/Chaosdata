// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symbol_static.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "symbol_static.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chaos_data {
class SymbolStatic_EquityMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_EquityMessage>
     _instance;
} _SymbolStatic_EquityMessage_default_instance_;
class SymbolStatic_FundMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_FundMessage>
     _instance;
} _SymbolStatic_FundMessage_default_instance_;
class SymbolStatic_WarranMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_WarranMessage>
     _instance;
} _SymbolStatic_WarranMessage_default_instance_;
class SymbolStatic_BoundMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_BoundMessage>
     _instance;
} _SymbolStatic_BoundMessage_default_instance_;
class SymbolStatic_CNVTMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_CNVTMessage>
     _instance;
} _SymbolStatic_CNVTMessage_default_instance_;
class SymbolStatic_FutureMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_FutureMessage>
     _instance;
} _SymbolStatic_FutureMessage_default_instance_;
class SymbolStatic_TruestMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_TruestMessage>
     _instance;
} _SymbolStatic_TruestMessage_default_instance_;
class SymbolStatic_SpecMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic_SpecMessage>
     _instance;
} _SymbolStatic_SpecMessage_default_instance_;
class SymbolStaticDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolStatic>
     _instance;
} _SymbolStatic_default_instance_;

namespace protobuf_symbol_5fstatic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, face_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, profit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, industry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, trade_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, cash_dividend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, security_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_EquityMessage, last_tradedate_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FundMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FundMessage, face_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FundMessage, total_issued_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FundMessage, iopv_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, cp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, cnvt_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, strike_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, maturity_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, under_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_WarranMessage, balance_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, maturity_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, intaccru_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, isssue_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, coupon_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, face_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_BoundMessage, accrued_int_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, cp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, cnvt_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, strike_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, maturity_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, under_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_CNVTMessage, accrued_int_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FutureMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FutureMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FutureMessage, last_day_oi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_FutureMessage, last_settle_price_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_TruestMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_TruestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_TruestMessage, asset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_TruestMessage, asset_date_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, equity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, fund_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, warran_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, cnvt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, future_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic_SpecMessage, truest_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, ctype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, csub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, market_mtk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, market_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, his_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, price_digit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, vol_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, float_issued_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, total_issued_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, last_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, adv_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, dec_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolStatic, spec_),
  0,
  1,
  4,
  5,
  2,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(SymbolStatic_EquityMessage)},
  { 19, 27, sizeof(SymbolStatic_FundMessage)},
  { 30, 42, sizeof(SymbolStatic_WarranMessage)},
  { 49, 60, sizeof(SymbolStatic_BoundMessage)},
  { 66, 78, sizeof(SymbolStatic_CNVTMessage)},
  { 85, 92, sizeof(SymbolStatic_FutureMessage)},
  { 94, 101, sizeof(SymbolStatic_TruestMessage)},
  { 103, 115, sizeof(SymbolStatic_SpecMessage)},
  { 122, 142, sizeof(SymbolStatic)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_EquityMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_FundMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_WarranMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_BoundMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_CNVTMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_FutureMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_TruestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_SpecMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolStatic_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "symbol_static.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SymbolStatic_EquityMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_EquityMessage_default_instance_);_SymbolStatic_FundMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_FundMessage_default_instance_);_SymbolStatic_WarranMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_WarranMessage_default_instance_);_SymbolStatic_BoundMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_BoundMessage_default_instance_);_SymbolStatic_CNVTMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_CNVTMessage_default_instance_);_SymbolStatic_FutureMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_FutureMessage_default_instance_);_SymbolStatic_TruestMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_TruestMessage_default_instance_);_SymbolStatic_SpecMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_SpecMessage_default_instance_);_SymbolStatic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolStatic_default_instance_);_SymbolStatic_SpecMessage_default_instance_._instance.get_mutable()->equity_ = const_cast< ::chaos_data::SymbolStatic_EquityMessage*>(
      ::chaos_data::SymbolStatic_EquityMessage::internal_default_instance());
  _SymbolStatic_SpecMessage_default_instance_._instance.get_mutable()->fund_ = const_cast< ::chaos_data::SymbolStatic_FundMessage*>(
      ::chaos_data::SymbolStatic_FundMessage::internal_default_instance());
  _SymbolStatic_SpecMessage_default_instance_._instance.get_mutable()->warran_ = const_cast< ::chaos_data::SymbolStatic_WarranMessage*>(
      ::chaos_data::SymbolStatic_WarranMessage::internal_default_instance());
  _SymbolStatic_SpecMessage_default_instance_._instance.get_mutable()->bound_ = const_cast< ::chaos_data::SymbolStatic_BoundMessage*>(
      ::chaos_data::SymbolStatic_BoundMessage::internal_default_instance());
  _SymbolStatic_SpecMessage_default_instance_._instance.get_mutable()->cnvt_ = const_cast< ::chaos_data::SymbolStatic_CNVTMessage*>(
      ::chaos_data::SymbolStatic_CNVTMessage::internal_default_instance());
  _SymbolStatic_SpecMessage_default_instance_._instance.get_mutable()->future_ = const_cast< ::chaos_data::SymbolStatic_FutureMessage*>(
      ::chaos_data::SymbolStatic_FutureMessage::internal_default_instance());
  _SymbolStatic_SpecMessage_default_instance_._instance.get_mutable()->truest_ = const_cast< ::chaos_data::SymbolStatic_TruestMessage*>(
      ::chaos_data::SymbolStatic_TruestMessage::internal_default_instance());
  _SymbolStatic_default_instance_._instance.get_mutable()->spec_ = const_cast< ::chaos_data::SymbolStatic_SpecMessage*>(
      ::chaos_data::SymbolStatic_SpecMessage::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023symbol_static.proto\022\nchaos_data\"\211\020\n\014Sy"
      "mbolStatic\022\016\n\006symbol\030\001 \001(\014\022\014\n\004name\030\002 \001(\014"
      "\0223\n\005ctype\030\003 \001(\0162$.chaos_data.SymbolStati"
      "c.SYMBOL_TYPE\022:\n\tcsub_type\030\004 \001(\0162\'.chaos"
      "_data.SymbolStatic.SYMBOL_SUBTYPE\022\022\n\nmar"
      "ket_mtk\030\005 \001(\014\022\023\n\013market_date\030\006 \001(\r\022\021\n\thi"
      "s_count\030\007 \001(\r\022\023\n\013price_digit\030\010 \001(\r\022\020\n\010vo"
      "l_unit\030\t \001(\005\022\024\n\014float_issued\030\n \001(\003\022\024\n\014to"
      "tal_issued\030\013 \001(\003\022\022\n\nlast_close\030\014 \001(\r\022\020\n\010"
      "adv_stop\030\r \001(\r\022\020\n\010dec_stop\030\016 \001(\r\0222\n\004spec"
      "\030\017 \001(\0132$.chaos_data.SymbolStatic.SpecMes"
      "sage\032\313\001\n\rEquityMessage\022\022\n\nface_value\030\001 \001"
      "(\002\022\016\n\006profit\030\002 \001(\002\022\020\n\010industry\030\003 \001(\r\022\024\n\014"
      "trade_status\030\004 \001(\005\022\025\n\rcash_dividend\030\005 \001("
      "\002\022\?\n\023security_properties\030\006 \001(\0162\".chaos_d"
      "ata.SymbolStatic.SYMBOL_SP\022\026\n\016last_trade"
      "date\030\007 \001(\r\032E\n\013FundMessage\022\022\n\nface_value\030"
      "\001 \001(\002\022\024\n\014total_issued\030\002 \001(\002\022\014\n\004iopv\030\003 \001("
      "\002\032\220\001\n\rWarranMessage\022\r\n\005style\030\001 \001(\005\022\n\n\002cp"
      "\030\002 \001(\005\022\022\n\ncnvt_ratio\030\003 \001(\002\022\024\n\014strike_pri"
      "ce\030\004 \001(\002\022\025\n\rmaturity_date\030\005 \001(\r\022\022\n\nunder"
      "_line\030\006 \001(\014\022\017\n\007balance\030\007 \001(\002\032\220\001\n\014BoundMe"
      "ssage\022\025\n\rmaturity_date\030\001 \001(\r\022\025\n\rintaccru"
      "_date\030\002 \001(\r\022\024\n\014isssue_price\030\003 \001(\002\022\023\n\013cou"
      "pon_rate\030\004 \001(\002\022\022\n\nface_value\030\005 \001(\002\022\023\n\013ac"
      "crued_int\030\006 \001(\002\032\222\001\n\013CNVTMessage\022\r\n\005style"
      "\030\001 \001(\005\022\n\n\002cp\030\002 \001(\005\022\022\n\ncnvt_ratio\030\003 \001(\002\022\024"
      "\n\014strike_price\030\004 \001(\002\022\025\n\rmaturity_date\030\005 "
      "\001(\r\022\022\n\nunder_line\030\006 \001(\014\022\023\n\013accrued_int\030\007"
      " \001(\002\032\?\n\rFutureMessage\022\023\n\013last_day_OI\030\001 \001"
      "(\r\022\031\n\021last_settle_price\030\002 \001(\002\0322\n\rTruestM"
      "essage\022\r\n\005asset\030\003 \001(\002\022\022\n\nasset_date\030\004 \001("
      "\r\032\213\003\n\013SpecMessage\0226\n\006equity\030\001 \001(\0132&.chao"
      "s_data.SymbolStatic.EquityMessage\0222\n\004fun"
      "d\030\002 \001(\0132$.chaos_data.SymbolStatic.FundMe"
      "ssage\0226\n\006warran\030\003 \001(\0132&.chaos_data.Symbo"
      "lStatic.WarranMessage\0224\n\005bound\030\004 \001(\0132%.c"
      "haos_data.SymbolStatic.BoundMessage\0222\n\004c"
      "nvt\030\005 \001(\0132$.chaos_data.SymbolStatic.CNVT"
      "Message\0226\n\006future\030\006 \001(\0132&.chaos_data.Sym"
      "bolStatic.FutureMessage\0226\n\006truest\030\007 \001(\0132"
      "&.chaos_data.SymbolStatic.TruestMessage\""
      "\320\001\n\013SYMBOL_TYPE\022\t\n\005INDEX\020\000\022\t\n\005STOCK\020\001\022\010\n"
      "\004FUND\020\002\022\010\n\004BOND\020\003\022\017\n\013OTHER_STOCK\020\004\022\n\n\006OP"
      "TION\020\005\022\014\n\010EXCHANGE\020\006\022\n\n\006FUTURE\020\007\022\013\n\007FTR_"
      "IDX\020\010\022\007\n\003RGZ\020\t\022\007\n\003ETF\020\n\022\007\n\003LOF\020\013\022\014\n\010COV_"
      "BOND\020\014\022\t\n\005TRUST\020\r\022\013\n\007WARRANT\020\016\022\010\n\004REPO\020\017"
      "\022\010\n\004COMM\020\020\"_\n\016SYMBOL_SUBTYPE\022\013\n\007NILTYPE\020"
      "\000\022\n\n\006ASHARE\020A\022\n\n\006BSHARE\020B\022\014\n\010GOV_BOND\020G\022"
      "\014\n\010ENT_BOND\020O\022\014\n\010FIN_BOND\020F\"h\n\tSYMBOL_SP"
      "\022\n\n\006NULLSP\020\000\022\007\n\003NSP\020N\022\007\n\003SSP\020S\022\007\n\003PSP\020P\022"
      "\007\n\003TSP\020T\022\007\n\003LSP\020L\022\007\n\003OSP\020O\022\007\n\003FSP\020F\022\007\n\003E"
      "SP\020E\022\007\n\003ZSP\020Z"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2093);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "symbol_static.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_symbol_5fstatic_2eproto

const ::google::protobuf::EnumDescriptor* SymbolStatic_SYMBOL_TYPE_descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_enum_descriptors[0];
}
bool SymbolStatic_SYMBOL_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SymbolStatic_SYMBOL_TYPE SymbolStatic::INDEX;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::STOCK;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::FUND;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::BOND;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::OTHER_STOCK;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::OPTION;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::EXCHANGE;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::FUTURE;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::FTR_IDX;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::RGZ;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::ETF;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::LOF;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::COV_BOND;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::TRUST;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::WARRANT;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::REPO;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::COMM;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::SYMBOL_TYPE_MIN;
const SymbolStatic_SYMBOL_TYPE SymbolStatic::SYMBOL_TYPE_MAX;
const int SymbolStatic::SYMBOL_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SymbolStatic_SYMBOL_SUBTYPE_descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_enum_descriptors[1];
}
bool SymbolStatic_SYMBOL_SUBTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 65:
    case 66:
    case 70:
    case 71:
    case 79:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::NILTYPE;
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::ASHARE;
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::BSHARE;
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::GOV_BOND;
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::ENT_BOND;
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::FIN_BOND;
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::SYMBOL_SUBTYPE_MIN;
const SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::SYMBOL_SUBTYPE_MAX;
const int SymbolStatic::SYMBOL_SUBTYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SymbolStatic_SYMBOL_SP_descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_enum_descriptors[2];
}
bool SymbolStatic_SYMBOL_SP_IsValid(int value) {
  switch (value) {
    case 0:
    case 69:
    case 70:
    case 76:
    case 78:
    case 79:
    case 80:
    case 83:
    case 84:
    case 90:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SymbolStatic_SYMBOL_SP SymbolStatic::NULLSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::NSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::SSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::PSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::TSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::LSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::OSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::FSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::ESP;
const SymbolStatic_SYMBOL_SP SymbolStatic::ZSP;
const SymbolStatic_SYMBOL_SP SymbolStatic::SYMBOL_SP_MIN;
const SymbolStatic_SYMBOL_SP SymbolStatic::SYMBOL_SP_MAX;
const int SymbolStatic::SYMBOL_SP_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_EquityMessage::kFaceValueFieldNumber;
const int SymbolStatic_EquityMessage::kProfitFieldNumber;
const int SymbolStatic_EquityMessage::kIndustryFieldNumber;
const int SymbolStatic_EquityMessage::kTradeStatusFieldNumber;
const int SymbolStatic_EquityMessage::kCashDividendFieldNumber;
const int SymbolStatic_EquityMessage::kSecurityPropertiesFieldNumber;
const int SymbolStatic_EquityMessage::kLastTradedateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_EquityMessage::SymbolStatic_EquityMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.EquityMessage)
}
SymbolStatic_EquityMessage::SymbolStatic_EquityMessage(const SymbolStatic_EquityMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&face_value_, &from.face_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_tradedate_) -
    reinterpret_cast<char*>(&face_value_)) + sizeof(last_tradedate_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.EquityMessage)
}

void SymbolStatic_EquityMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&face_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_tradedate_) -
      reinterpret_cast<char*>(&face_value_)) + sizeof(last_tradedate_));
}

SymbolStatic_EquityMessage::~SymbolStatic_EquityMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.EquityMessage)
  SharedDtor();
}

void SymbolStatic_EquityMessage::SharedDtor() {
}

void SymbolStatic_EquityMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_EquityMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_EquityMessage& SymbolStatic_EquityMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_EquityMessage* SymbolStatic_EquityMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_EquityMessage* n = new SymbolStatic_EquityMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_EquityMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.EquityMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&face_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_tradedate_) -
        reinterpret_cast<char*>(&face_value_)) + sizeof(last_tradedate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_EquityMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.EquityMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float face_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_face_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &face_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float profit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_profit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 industry = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_industry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &industry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 trade_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_trade_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trade_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cash_dividend = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_cash_dividend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cash_dividend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.SYMBOL_SP security_properties = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chaos_data::SymbolStatic_SYMBOL_SP_IsValid(value)) {
            set_security_properties(static_cast< ::chaos_data::SymbolStatic_SYMBOL_SP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_tradedate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_last_tradedate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_tradedate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.EquityMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.EquityMessage)
  return false;
#undef DO_
}

void SymbolStatic_EquityMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.EquityMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float face_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->face_value(), output);
  }

  // optional float profit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->profit(), output);
  }

  // optional uint32 industry = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->industry(), output);
  }

  // optional int32 trade_status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->trade_status(), output);
  }

  // optional float cash_dividend = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cash_dividend(), output);
  }

  // optional .chaos_data.SymbolStatic.SYMBOL_SP security_properties = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->security_properties(), output);
  }

  // optional uint32 last_tradedate = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_tradedate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.EquityMessage)
}

::google::protobuf::uint8* SymbolStatic_EquityMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.EquityMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float face_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->face_value(), target);
  }

  // optional float profit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->profit(), target);
  }

  // optional uint32 industry = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->industry(), target);
  }

  // optional int32 trade_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->trade_status(), target);
  }

  // optional float cash_dividend = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cash_dividend(), target);
  }

  // optional .chaos_data.SymbolStatic.SYMBOL_SP security_properties = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->security_properties(), target);
  }

  // optional uint32 last_tradedate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_tradedate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.EquityMessage)
  return target;
}

size_t SymbolStatic_EquityMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.EquityMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional float face_value = 1;
    if (has_face_value()) {
      total_size += 1 + 4;
    }

    // optional float profit = 2;
    if (has_profit()) {
      total_size += 1 + 4;
    }

    // optional uint32 industry = 3;
    if (has_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->industry());
    }

    // optional int32 trade_status = 4;
    if (has_trade_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trade_status());
    }

    // optional float cash_dividend = 5;
    if (has_cash_dividend()) {
      total_size += 1 + 4;
    }

    // optional .chaos_data.SymbolStatic.SYMBOL_SP security_properties = 6;
    if (has_security_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_properties());
    }

    // optional uint32 last_tradedate = 7;
    if (has_last_tradedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_tradedate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_EquityMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.EquityMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_EquityMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_EquityMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.EquityMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.EquityMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_EquityMessage::MergeFrom(const SymbolStatic_EquityMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.EquityMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      face_value_ = from.face_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      profit_ = from.profit_;
    }
    if (cached_has_bits & 0x00000004u) {
      industry_ = from.industry_;
    }
    if (cached_has_bits & 0x00000008u) {
      trade_status_ = from.trade_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      cash_dividend_ = from.cash_dividend_;
    }
    if (cached_has_bits & 0x00000020u) {
      security_properties_ = from.security_properties_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_tradedate_ = from.last_tradedate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic_EquityMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.EquityMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_EquityMessage::CopyFrom(const SymbolStatic_EquityMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.EquityMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_EquityMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_EquityMessage::Swap(SymbolStatic_EquityMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_EquityMessage::InternalSwap(SymbolStatic_EquityMessage* other) {
  using std::swap;
  swap(face_value_, other->face_value_);
  swap(profit_, other->profit_);
  swap(industry_, other->industry_);
  swap(trade_status_, other->trade_status_);
  swap(cash_dividend_, other->cash_dividend_);
  swap(security_properties_, other->security_properties_);
  swap(last_tradedate_, other->last_tradedate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_EquityMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_EquityMessage

// optional float face_value = 1;
bool SymbolStatic_EquityMessage::has_face_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_EquityMessage::set_has_face_value() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_EquityMessage::clear_has_face_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_EquityMessage::clear_face_value() {
  face_value_ = 0;
  clear_has_face_value();
}
float SymbolStatic_EquityMessage::face_value() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.EquityMessage.face_value)
  return face_value_;
}
void SymbolStatic_EquityMessage::set_face_value(float value) {
  set_has_face_value();
  face_value_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.EquityMessage.face_value)
}

// optional float profit = 2;
bool SymbolStatic_EquityMessage::has_profit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_EquityMessage::set_has_profit() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_EquityMessage::clear_has_profit() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_EquityMessage::clear_profit() {
  profit_ = 0;
  clear_has_profit();
}
float SymbolStatic_EquityMessage::profit() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.EquityMessage.profit)
  return profit_;
}
void SymbolStatic_EquityMessage::set_profit(float value) {
  set_has_profit();
  profit_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.EquityMessage.profit)
}

// optional uint32 industry = 3;
bool SymbolStatic_EquityMessage::has_industry() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolStatic_EquityMessage::set_has_industry() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolStatic_EquityMessage::clear_has_industry() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolStatic_EquityMessage::clear_industry() {
  industry_ = 0u;
  clear_has_industry();
}
::google::protobuf::uint32 SymbolStatic_EquityMessage::industry() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.EquityMessage.industry)
  return industry_;
}
void SymbolStatic_EquityMessage::set_industry(::google::protobuf::uint32 value) {
  set_has_industry();
  industry_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.EquityMessage.industry)
}

// optional int32 trade_status = 4;
bool SymbolStatic_EquityMessage::has_trade_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolStatic_EquityMessage::set_has_trade_status() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolStatic_EquityMessage::clear_has_trade_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolStatic_EquityMessage::clear_trade_status() {
  trade_status_ = 0;
  clear_has_trade_status();
}
::google::protobuf::int32 SymbolStatic_EquityMessage::trade_status() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.EquityMessage.trade_status)
  return trade_status_;
}
void SymbolStatic_EquityMessage::set_trade_status(::google::protobuf::int32 value) {
  set_has_trade_status();
  trade_status_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.EquityMessage.trade_status)
}

// optional float cash_dividend = 5;
bool SymbolStatic_EquityMessage::has_cash_dividend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolStatic_EquityMessage::set_has_cash_dividend() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolStatic_EquityMessage::clear_has_cash_dividend() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolStatic_EquityMessage::clear_cash_dividend() {
  cash_dividend_ = 0;
  clear_has_cash_dividend();
}
float SymbolStatic_EquityMessage::cash_dividend() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.EquityMessage.cash_dividend)
  return cash_dividend_;
}
void SymbolStatic_EquityMessage::set_cash_dividend(float value) {
  set_has_cash_dividend();
  cash_dividend_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.EquityMessage.cash_dividend)
}

// optional .chaos_data.SymbolStatic.SYMBOL_SP security_properties = 6;
bool SymbolStatic_EquityMessage::has_security_properties() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SymbolStatic_EquityMessage::set_has_security_properties() {
  _has_bits_[0] |= 0x00000020u;
}
void SymbolStatic_EquityMessage::clear_has_security_properties() {
  _has_bits_[0] &= ~0x00000020u;
}
void SymbolStatic_EquityMessage::clear_security_properties() {
  security_properties_ = 0;
  clear_has_security_properties();
}
::chaos_data::SymbolStatic_SYMBOL_SP SymbolStatic_EquityMessage::security_properties() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.EquityMessage.security_properties)
  return static_cast< ::chaos_data::SymbolStatic_SYMBOL_SP >(security_properties_);
}
void SymbolStatic_EquityMessage::set_security_properties(::chaos_data::SymbolStatic_SYMBOL_SP value) {
  assert(::chaos_data::SymbolStatic_SYMBOL_SP_IsValid(value));
  set_has_security_properties();
  security_properties_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.EquityMessage.security_properties)
}

// optional uint32 last_tradedate = 7;
bool SymbolStatic_EquityMessage::has_last_tradedate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SymbolStatic_EquityMessage::set_has_last_tradedate() {
  _has_bits_[0] |= 0x00000040u;
}
void SymbolStatic_EquityMessage::clear_has_last_tradedate() {
  _has_bits_[0] &= ~0x00000040u;
}
void SymbolStatic_EquityMessage::clear_last_tradedate() {
  last_tradedate_ = 0u;
  clear_has_last_tradedate();
}
::google::protobuf::uint32 SymbolStatic_EquityMessage::last_tradedate() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.EquityMessage.last_tradedate)
  return last_tradedate_;
}
void SymbolStatic_EquityMessage::set_last_tradedate(::google::protobuf::uint32 value) {
  set_has_last_tradedate();
  last_tradedate_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.EquityMessage.last_tradedate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_FundMessage::kFaceValueFieldNumber;
const int SymbolStatic_FundMessage::kTotalIssuedFieldNumber;
const int SymbolStatic_FundMessage::kIopvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_FundMessage::SymbolStatic_FundMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.FundMessage)
}
SymbolStatic_FundMessage::SymbolStatic_FundMessage(const SymbolStatic_FundMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&face_value_, &from.face_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&iopv_) -
    reinterpret_cast<char*>(&face_value_)) + sizeof(iopv_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.FundMessage)
}

void SymbolStatic_FundMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&face_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iopv_) -
      reinterpret_cast<char*>(&face_value_)) + sizeof(iopv_));
}

SymbolStatic_FundMessage::~SymbolStatic_FundMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.FundMessage)
  SharedDtor();
}

void SymbolStatic_FundMessage::SharedDtor() {
}

void SymbolStatic_FundMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_FundMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_FundMessage& SymbolStatic_FundMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_FundMessage* SymbolStatic_FundMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_FundMessage* n = new SymbolStatic_FundMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_FundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.FundMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&face_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iopv_) -
        reinterpret_cast<char*>(&face_value_)) + sizeof(iopv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_FundMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.FundMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float face_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_face_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &face_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float total_issued = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_total_issued();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_issued_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float iopv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iopv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.FundMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.FundMessage)
  return false;
#undef DO_
}

void SymbolStatic_FundMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.FundMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float face_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->face_value(), output);
  }

  // optional float total_issued = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->total_issued(), output);
  }

  // optional float iopv = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->iopv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.FundMessage)
}

::google::protobuf::uint8* SymbolStatic_FundMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.FundMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float face_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->face_value(), target);
  }

  // optional float total_issued = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->total_issued(), target);
  }

  // optional float iopv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->iopv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.FundMessage)
  return target;
}

size_t SymbolStatic_FundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.FundMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float face_value = 1;
    if (has_face_value()) {
      total_size += 1 + 4;
    }

    // optional float total_issued = 2;
    if (has_total_issued()) {
      total_size += 1 + 4;
    }

    // optional float iopv = 3;
    if (has_iopv()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_FundMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.FundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_FundMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_FundMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.FundMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.FundMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_FundMessage::MergeFrom(const SymbolStatic_FundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.FundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      face_value_ = from.face_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_issued_ = from.total_issued_;
    }
    if (cached_has_bits & 0x00000004u) {
      iopv_ = from.iopv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic_FundMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.FundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_FundMessage::CopyFrom(const SymbolStatic_FundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.FundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_FundMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_FundMessage::Swap(SymbolStatic_FundMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_FundMessage::InternalSwap(SymbolStatic_FundMessage* other) {
  using std::swap;
  swap(face_value_, other->face_value_);
  swap(total_issued_, other->total_issued_);
  swap(iopv_, other->iopv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_FundMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_FundMessage

// optional float face_value = 1;
bool SymbolStatic_FundMessage::has_face_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_FundMessage::set_has_face_value() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_FundMessage::clear_has_face_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_FundMessage::clear_face_value() {
  face_value_ = 0;
  clear_has_face_value();
}
float SymbolStatic_FundMessage::face_value() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.FundMessage.face_value)
  return face_value_;
}
void SymbolStatic_FundMessage::set_face_value(float value) {
  set_has_face_value();
  face_value_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.FundMessage.face_value)
}

// optional float total_issued = 2;
bool SymbolStatic_FundMessage::has_total_issued() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_FundMessage::set_has_total_issued() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_FundMessage::clear_has_total_issued() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_FundMessage::clear_total_issued() {
  total_issued_ = 0;
  clear_has_total_issued();
}
float SymbolStatic_FundMessage::total_issued() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.FundMessage.total_issued)
  return total_issued_;
}
void SymbolStatic_FundMessage::set_total_issued(float value) {
  set_has_total_issued();
  total_issued_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.FundMessage.total_issued)
}

// optional float iopv = 3;
bool SymbolStatic_FundMessage::has_iopv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolStatic_FundMessage::set_has_iopv() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolStatic_FundMessage::clear_has_iopv() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolStatic_FundMessage::clear_iopv() {
  iopv_ = 0;
  clear_has_iopv();
}
float SymbolStatic_FundMessage::iopv() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.FundMessage.iopv)
  return iopv_;
}
void SymbolStatic_FundMessage::set_iopv(float value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.FundMessage.iopv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_WarranMessage::kStyleFieldNumber;
const int SymbolStatic_WarranMessage::kCpFieldNumber;
const int SymbolStatic_WarranMessage::kCnvtRatioFieldNumber;
const int SymbolStatic_WarranMessage::kStrikePriceFieldNumber;
const int SymbolStatic_WarranMessage::kMaturityDateFieldNumber;
const int SymbolStatic_WarranMessage::kUnderLineFieldNumber;
const int SymbolStatic_WarranMessage::kBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_WarranMessage::SymbolStatic_WarranMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.WarranMessage)
}
SymbolStatic_WarranMessage::SymbolStatic_WarranMessage(const SymbolStatic_WarranMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  under_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_under_line()) {
    under_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.under_line_);
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&style_)) + sizeof(balance_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.WarranMessage)
}

void SymbolStatic_WarranMessage::SharedCtor() {
  _cached_size_ = 0;
  under_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&style_)) + sizeof(balance_));
}

SymbolStatic_WarranMessage::~SymbolStatic_WarranMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.WarranMessage)
  SharedDtor();
}

void SymbolStatic_WarranMessage::SharedDtor() {
  under_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolStatic_WarranMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_WarranMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_WarranMessage& SymbolStatic_WarranMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_WarranMessage* SymbolStatic_WarranMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_WarranMessage* n = new SymbolStatic_WarranMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_WarranMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.WarranMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_under_line()) {
    GOOGLE_DCHECK(!under_line_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*under_line_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 126u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balance_) -
        reinterpret_cast<char*>(&style_)) + sizeof(balance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_WarranMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.WarranMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 style = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cnvt_ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_cnvt_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cnvt_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float strike_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_strike_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strike_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maturity_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_maturity_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maturity_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes under_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_under_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float balance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.WarranMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.WarranMessage)
  return false;
#undef DO_
}

void SymbolStatic_WarranMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.WarranMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 style = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->style(), output);
  }

  // optional int32 cp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cp(), output);
  }

  // optional float cnvt_ratio = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cnvt_ratio(), output);
  }

  // optional float strike_price = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->strike_price(), output);
  }

  // optional uint32 maturity_date = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maturity_date(), output);
  }

  // optional bytes under_line = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->under_line(), output);
  }

  // optional float balance = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.WarranMessage)
}

::google::protobuf::uint8* SymbolStatic_WarranMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.WarranMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->style(), target);
  }

  // optional int32 cp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cp(), target);
  }

  // optional float cnvt_ratio = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cnvt_ratio(), target);
  }

  // optional float strike_price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->strike_price(), target);
  }

  // optional uint32 maturity_date = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maturity_date(), target);
  }

  // optional bytes under_line = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->under_line(), target);
  }

  // optional float balance = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.WarranMessage)
  return target;
}

size_t SymbolStatic_WarranMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.WarranMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes under_line = 6;
    if (has_under_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->under_line());
    }

    // optional int32 style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional int32 cp = 2;
    if (has_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cp());
    }

    // optional float cnvt_ratio = 3;
    if (has_cnvt_ratio()) {
      total_size += 1 + 4;
    }

    // optional float strike_price = 4;
    if (has_strike_price()) {
      total_size += 1 + 4;
    }

    // optional uint32 maturity_date = 5;
    if (has_maturity_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maturity_date());
    }

    // optional float balance = 7;
    if (has_balance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_WarranMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.WarranMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_WarranMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_WarranMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.WarranMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.WarranMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_WarranMessage::MergeFrom(const SymbolStatic_WarranMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.WarranMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_under_line();
      under_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.under_line_);
    }
    if (cached_has_bits & 0x00000002u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000004u) {
      cp_ = from.cp_;
    }
    if (cached_has_bits & 0x00000008u) {
      cnvt_ratio_ = from.cnvt_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      strike_price_ = from.strike_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      maturity_date_ = from.maturity_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      balance_ = from.balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic_WarranMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.WarranMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_WarranMessage::CopyFrom(const SymbolStatic_WarranMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.WarranMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_WarranMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_WarranMessage::Swap(SymbolStatic_WarranMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_WarranMessage::InternalSwap(SymbolStatic_WarranMessage* other) {
  using std::swap;
  under_line_.Swap(&other->under_line_);
  swap(style_, other->style_);
  swap(cp_, other->cp_);
  swap(cnvt_ratio_, other->cnvt_ratio_);
  swap(strike_price_, other->strike_price_);
  swap(maturity_date_, other->maturity_date_);
  swap(balance_, other->balance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_WarranMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_WarranMessage

// optional int32 style = 1;
bool SymbolStatic_WarranMessage::has_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_WarranMessage::set_has_style() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_WarranMessage::clear_has_style() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_WarranMessage::clear_style() {
  style_ = 0;
  clear_has_style();
}
::google::protobuf::int32 SymbolStatic_WarranMessage::style() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.WarranMessage.style)
  return style_;
}
void SymbolStatic_WarranMessage::set_style(::google::protobuf::int32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.WarranMessage.style)
}

// optional int32 cp = 2;
bool SymbolStatic_WarranMessage::has_cp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolStatic_WarranMessage::set_has_cp() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolStatic_WarranMessage::clear_has_cp() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolStatic_WarranMessage::clear_cp() {
  cp_ = 0;
  clear_has_cp();
}
::google::protobuf::int32 SymbolStatic_WarranMessage::cp() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.WarranMessage.cp)
  return cp_;
}
void SymbolStatic_WarranMessage::set_cp(::google::protobuf::int32 value) {
  set_has_cp();
  cp_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.WarranMessage.cp)
}

// optional float cnvt_ratio = 3;
bool SymbolStatic_WarranMessage::has_cnvt_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolStatic_WarranMessage::set_has_cnvt_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolStatic_WarranMessage::clear_has_cnvt_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolStatic_WarranMessage::clear_cnvt_ratio() {
  cnvt_ratio_ = 0;
  clear_has_cnvt_ratio();
}
float SymbolStatic_WarranMessage::cnvt_ratio() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.WarranMessage.cnvt_ratio)
  return cnvt_ratio_;
}
void SymbolStatic_WarranMessage::set_cnvt_ratio(float value) {
  set_has_cnvt_ratio();
  cnvt_ratio_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.WarranMessage.cnvt_ratio)
}

// optional float strike_price = 4;
bool SymbolStatic_WarranMessage::has_strike_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolStatic_WarranMessage::set_has_strike_price() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolStatic_WarranMessage::clear_has_strike_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolStatic_WarranMessage::clear_strike_price() {
  strike_price_ = 0;
  clear_has_strike_price();
}
float SymbolStatic_WarranMessage::strike_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.WarranMessage.strike_price)
  return strike_price_;
}
void SymbolStatic_WarranMessage::set_strike_price(float value) {
  set_has_strike_price();
  strike_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.WarranMessage.strike_price)
}

// optional uint32 maturity_date = 5;
bool SymbolStatic_WarranMessage::has_maturity_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SymbolStatic_WarranMessage::set_has_maturity_date() {
  _has_bits_[0] |= 0x00000020u;
}
void SymbolStatic_WarranMessage::clear_has_maturity_date() {
  _has_bits_[0] &= ~0x00000020u;
}
void SymbolStatic_WarranMessage::clear_maturity_date() {
  maturity_date_ = 0u;
  clear_has_maturity_date();
}
::google::protobuf::uint32 SymbolStatic_WarranMessage::maturity_date() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.WarranMessage.maturity_date)
  return maturity_date_;
}
void SymbolStatic_WarranMessage::set_maturity_date(::google::protobuf::uint32 value) {
  set_has_maturity_date();
  maturity_date_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.WarranMessage.maturity_date)
}

// optional bytes under_line = 6;
bool SymbolStatic_WarranMessage::has_under_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_WarranMessage::set_has_under_line() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_WarranMessage::clear_has_under_line() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_WarranMessage::clear_under_line() {
  under_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_under_line();
}
const ::std::string& SymbolStatic_WarranMessage::under_line() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.WarranMessage.under_line)
  return under_line_.GetNoArena();
}
void SymbolStatic_WarranMessage::set_under_line(const ::std::string& value) {
  set_has_under_line();
  under_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.WarranMessage.under_line)
}
#if LANG_CXX11
void SymbolStatic_WarranMessage::set_under_line(::std::string&& value) {
  set_has_under_line();
  under_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chaos_data.SymbolStatic.WarranMessage.under_line)
}
#endif
void SymbolStatic_WarranMessage::set_under_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_under_line();
  under_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chaos_data.SymbolStatic.WarranMessage.under_line)
}
void SymbolStatic_WarranMessage::set_under_line(const void* value, size_t size) {
  set_has_under_line();
  under_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chaos_data.SymbolStatic.WarranMessage.under_line)
}
::std::string* SymbolStatic_WarranMessage::mutable_under_line() {
  set_has_under_line();
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.WarranMessage.under_line)
  return under_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolStatic_WarranMessage::release_under_line() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.WarranMessage.under_line)
  clear_has_under_line();
  return under_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolStatic_WarranMessage::set_allocated_under_line(::std::string* under_line) {
  if (under_line != NULL) {
    set_has_under_line();
  } else {
    clear_has_under_line();
  }
  under_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), under_line);
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.WarranMessage.under_line)
}

// optional float balance = 7;
bool SymbolStatic_WarranMessage::has_balance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SymbolStatic_WarranMessage::set_has_balance() {
  _has_bits_[0] |= 0x00000040u;
}
void SymbolStatic_WarranMessage::clear_has_balance() {
  _has_bits_[0] &= ~0x00000040u;
}
void SymbolStatic_WarranMessage::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
float SymbolStatic_WarranMessage::balance() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.WarranMessage.balance)
  return balance_;
}
void SymbolStatic_WarranMessage::set_balance(float value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.WarranMessage.balance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_BoundMessage::kMaturityDateFieldNumber;
const int SymbolStatic_BoundMessage::kIntaccruDateFieldNumber;
const int SymbolStatic_BoundMessage::kIsssuePriceFieldNumber;
const int SymbolStatic_BoundMessage::kCouponRateFieldNumber;
const int SymbolStatic_BoundMessage::kFaceValueFieldNumber;
const int SymbolStatic_BoundMessage::kAccruedIntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_BoundMessage::SymbolStatic_BoundMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.BoundMessage)
}
SymbolStatic_BoundMessage::SymbolStatic_BoundMessage(const SymbolStatic_BoundMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maturity_date_, &from.maturity_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&accrued_int_) -
    reinterpret_cast<char*>(&maturity_date_)) + sizeof(accrued_int_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.BoundMessage)
}

void SymbolStatic_BoundMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&maturity_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accrued_int_) -
      reinterpret_cast<char*>(&maturity_date_)) + sizeof(accrued_int_));
}

SymbolStatic_BoundMessage::~SymbolStatic_BoundMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.BoundMessage)
  SharedDtor();
}

void SymbolStatic_BoundMessage::SharedDtor() {
}

void SymbolStatic_BoundMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_BoundMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_BoundMessage& SymbolStatic_BoundMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_BoundMessage* SymbolStatic_BoundMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_BoundMessage* n = new SymbolStatic_BoundMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_BoundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.BoundMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&maturity_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accrued_int_) -
        reinterpret_cast<char*>(&maturity_date_)) + sizeof(accrued_int_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_BoundMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.BoundMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maturity_date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_maturity_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maturity_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 intaccru_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_intaccru_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intaccru_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float isssue_price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_isssue_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &isssue_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float coupon_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_coupon_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coupon_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float face_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_face_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &face_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accrued_int = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_accrued_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accrued_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.BoundMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.BoundMessage)
  return false;
#undef DO_
}

void SymbolStatic_BoundMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.BoundMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 maturity_date = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maturity_date(), output);
  }

  // optional uint32 intaccru_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intaccru_date(), output);
  }

  // optional float isssue_price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->isssue_price(), output);
  }

  // optional float coupon_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->coupon_rate(), output);
  }

  // optional float face_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->face_value(), output);
  }

  // optional float accrued_int = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->accrued_int(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.BoundMessage)
}

::google::protobuf::uint8* SymbolStatic_BoundMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.BoundMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 maturity_date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maturity_date(), target);
  }

  // optional uint32 intaccru_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intaccru_date(), target);
  }

  // optional float isssue_price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->isssue_price(), target);
  }

  // optional float coupon_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->coupon_rate(), target);
  }

  // optional float face_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->face_value(), target);
  }

  // optional float accrued_int = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->accrued_int(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.BoundMessage)
  return target;
}

size_t SymbolStatic_BoundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.BoundMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 maturity_date = 1;
    if (has_maturity_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maturity_date());
    }

    // optional uint32 intaccru_date = 2;
    if (has_intaccru_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intaccru_date());
    }

    // optional float isssue_price = 3;
    if (has_isssue_price()) {
      total_size += 1 + 4;
    }

    // optional float coupon_rate = 4;
    if (has_coupon_rate()) {
      total_size += 1 + 4;
    }

    // optional float face_value = 5;
    if (has_face_value()) {
      total_size += 1 + 4;
    }

    // optional float accrued_int = 6;
    if (has_accrued_int()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_BoundMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.BoundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_BoundMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_BoundMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.BoundMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.BoundMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_BoundMessage::MergeFrom(const SymbolStatic_BoundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.BoundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      maturity_date_ = from.maturity_date_;
    }
    if (cached_has_bits & 0x00000002u) {
      intaccru_date_ = from.intaccru_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      isssue_price_ = from.isssue_price_;
    }
    if (cached_has_bits & 0x00000008u) {
      coupon_rate_ = from.coupon_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      face_value_ = from.face_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      accrued_int_ = from.accrued_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic_BoundMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.BoundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_BoundMessage::CopyFrom(const SymbolStatic_BoundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.BoundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_BoundMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_BoundMessage::Swap(SymbolStatic_BoundMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_BoundMessage::InternalSwap(SymbolStatic_BoundMessage* other) {
  using std::swap;
  swap(maturity_date_, other->maturity_date_);
  swap(intaccru_date_, other->intaccru_date_);
  swap(isssue_price_, other->isssue_price_);
  swap(coupon_rate_, other->coupon_rate_);
  swap(face_value_, other->face_value_);
  swap(accrued_int_, other->accrued_int_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_BoundMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_BoundMessage

// optional uint32 maturity_date = 1;
bool SymbolStatic_BoundMessage::has_maturity_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_BoundMessage::set_has_maturity_date() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_BoundMessage::clear_has_maturity_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_BoundMessage::clear_maturity_date() {
  maturity_date_ = 0u;
  clear_has_maturity_date();
}
::google::protobuf::uint32 SymbolStatic_BoundMessage::maturity_date() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.BoundMessage.maturity_date)
  return maturity_date_;
}
void SymbolStatic_BoundMessage::set_maturity_date(::google::protobuf::uint32 value) {
  set_has_maturity_date();
  maturity_date_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.BoundMessage.maturity_date)
}

// optional uint32 intaccru_date = 2;
bool SymbolStatic_BoundMessage::has_intaccru_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_BoundMessage::set_has_intaccru_date() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_BoundMessage::clear_has_intaccru_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_BoundMessage::clear_intaccru_date() {
  intaccru_date_ = 0u;
  clear_has_intaccru_date();
}
::google::protobuf::uint32 SymbolStatic_BoundMessage::intaccru_date() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.BoundMessage.intaccru_date)
  return intaccru_date_;
}
void SymbolStatic_BoundMessage::set_intaccru_date(::google::protobuf::uint32 value) {
  set_has_intaccru_date();
  intaccru_date_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.BoundMessage.intaccru_date)
}

// optional float isssue_price = 3;
bool SymbolStatic_BoundMessage::has_isssue_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolStatic_BoundMessage::set_has_isssue_price() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolStatic_BoundMessage::clear_has_isssue_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolStatic_BoundMessage::clear_isssue_price() {
  isssue_price_ = 0;
  clear_has_isssue_price();
}
float SymbolStatic_BoundMessage::isssue_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.BoundMessage.isssue_price)
  return isssue_price_;
}
void SymbolStatic_BoundMessage::set_isssue_price(float value) {
  set_has_isssue_price();
  isssue_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.BoundMessage.isssue_price)
}

// optional float coupon_rate = 4;
bool SymbolStatic_BoundMessage::has_coupon_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolStatic_BoundMessage::set_has_coupon_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolStatic_BoundMessage::clear_has_coupon_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolStatic_BoundMessage::clear_coupon_rate() {
  coupon_rate_ = 0;
  clear_has_coupon_rate();
}
float SymbolStatic_BoundMessage::coupon_rate() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.BoundMessage.coupon_rate)
  return coupon_rate_;
}
void SymbolStatic_BoundMessage::set_coupon_rate(float value) {
  set_has_coupon_rate();
  coupon_rate_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.BoundMessage.coupon_rate)
}

// optional float face_value = 5;
bool SymbolStatic_BoundMessage::has_face_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolStatic_BoundMessage::set_has_face_value() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolStatic_BoundMessage::clear_has_face_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolStatic_BoundMessage::clear_face_value() {
  face_value_ = 0;
  clear_has_face_value();
}
float SymbolStatic_BoundMessage::face_value() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.BoundMessage.face_value)
  return face_value_;
}
void SymbolStatic_BoundMessage::set_face_value(float value) {
  set_has_face_value();
  face_value_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.BoundMessage.face_value)
}

// optional float accrued_int = 6;
bool SymbolStatic_BoundMessage::has_accrued_int() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SymbolStatic_BoundMessage::set_has_accrued_int() {
  _has_bits_[0] |= 0x00000020u;
}
void SymbolStatic_BoundMessage::clear_has_accrued_int() {
  _has_bits_[0] &= ~0x00000020u;
}
void SymbolStatic_BoundMessage::clear_accrued_int() {
  accrued_int_ = 0;
  clear_has_accrued_int();
}
float SymbolStatic_BoundMessage::accrued_int() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.BoundMessage.accrued_int)
  return accrued_int_;
}
void SymbolStatic_BoundMessage::set_accrued_int(float value) {
  set_has_accrued_int();
  accrued_int_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.BoundMessage.accrued_int)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_CNVTMessage::kStyleFieldNumber;
const int SymbolStatic_CNVTMessage::kCpFieldNumber;
const int SymbolStatic_CNVTMessage::kCnvtRatioFieldNumber;
const int SymbolStatic_CNVTMessage::kStrikePriceFieldNumber;
const int SymbolStatic_CNVTMessage::kMaturityDateFieldNumber;
const int SymbolStatic_CNVTMessage::kUnderLineFieldNumber;
const int SymbolStatic_CNVTMessage::kAccruedIntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_CNVTMessage::SymbolStatic_CNVTMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.CNVTMessage)
}
SymbolStatic_CNVTMessage::SymbolStatic_CNVTMessage(const SymbolStatic_CNVTMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  under_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_under_line()) {
    under_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.under_line_);
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&accrued_int_) -
    reinterpret_cast<char*>(&style_)) + sizeof(accrued_int_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.CNVTMessage)
}

void SymbolStatic_CNVTMessage::SharedCtor() {
  _cached_size_ = 0;
  under_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accrued_int_) -
      reinterpret_cast<char*>(&style_)) + sizeof(accrued_int_));
}

SymbolStatic_CNVTMessage::~SymbolStatic_CNVTMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.CNVTMessage)
  SharedDtor();
}

void SymbolStatic_CNVTMessage::SharedDtor() {
  under_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolStatic_CNVTMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_CNVTMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_CNVTMessage& SymbolStatic_CNVTMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_CNVTMessage* SymbolStatic_CNVTMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_CNVTMessage* n = new SymbolStatic_CNVTMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_CNVTMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.CNVTMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_under_line()) {
    GOOGLE_DCHECK(!under_line_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*under_line_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 126u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accrued_int_) -
        reinterpret_cast<char*>(&style_)) + sizeof(accrued_int_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_CNVTMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.CNVTMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 style = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cnvt_ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_cnvt_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cnvt_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float strike_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_strike_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strike_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maturity_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_maturity_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maturity_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes under_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_under_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accrued_int = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_accrued_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accrued_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.CNVTMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.CNVTMessage)
  return false;
#undef DO_
}

void SymbolStatic_CNVTMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.CNVTMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 style = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->style(), output);
  }

  // optional int32 cp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cp(), output);
  }

  // optional float cnvt_ratio = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cnvt_ratio(), output);
  }

  // optional float strike_price = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->strike_price(), output);
  }

  // optional uint32 maturity_date = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maturity_date(), output);
  }

  // optional bytes under_line = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->under_line(), output);
  }

  // optional float accrued_int = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->accrued_int(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.CNVTMessage)
}

::google::protobuf::uint8* SymbolStatic_CNVTMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.CNVTMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->style(), target);
  }

  // optional int32 cp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cp(), target);
  }

  // optional float cnvt_ratio = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cnvt_ratio(), target);
  }

  // optional float strike_price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->strike_price(), target);
  }

  // optional uint32 maturity_date = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maturity_date(), target);
  }

  // optional bytes under_line = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->under_line(), target);
  }

  // optional float accrued_int = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->accrued_int(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.CNVTMessage)
  return target;
}

size_t SymbolStatic_CNVTMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.CNVTMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes under_line = 6;
    if (has_under_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->under_line());
    }

    // optional int32 style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional int32 cp = 2;
    if (has_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cp());
    }

    // optional float cnvt_ratio = 3;
    if (has_cnvt_ratio()) {
      total_size += 1 + 4;
    }

    // optional float strike_price = 4;
    if (has_strike_price()) {
      total_size += 1 + 4;
    }

    // optional uint32 maturity_date = 5;
    if (has_maturity_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maturity_date());
    }

    // optional float accrued_int = 7;
    if (has_accrued_int()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_CNVTMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.CNVTMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_CNVTMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_CNVTMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.CNVTMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.CNVTMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_CNVTMessage::MergeFrom(const SymbolStatic_CNVTMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.CNVTMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_under_line();
      under_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.under_line_);
    }
    if (cached_has_bits & 0x00000002u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000004u) {
      cp_ = from.cp_;
    }
    if (cached_has_bits & 0x00000008u) {
      cnvt_ratio_ = from.cnvt_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      strike_price_ = from.strike_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      maturity_date_ = from.maturity_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      accrued_int_ = from.accrued_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic_CNVTMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.CNVTMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_CNVTMessage::CopyFrom(const SymbolStatic_CNVTMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.CNVTMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_CNVTMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_CNVTMessage::Swap(SymbolStatic_CNVTMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_CNVTMessage::InternalSwap(SymbolStatic_CNVTMessage* other) {
  using std::swap;
  under_line_.Swap(&other->under_line_);
  swap(style_, other->style_);
  swap(cp_, other->cp_);
  swap(cnvt_ratio_, other->cnvt_ratio_);
  swap(strike_price_, other->strike_price_);
  swap(maturity_date_, other->maturity_date_);
  swap(accrued_int_, other->accrued_int_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_CNVTMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_CNVTMessage

// optional int32 style = 1;
bool SymbolStatic_CNVTMessage::has_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_CNVTMessage::set_has_style() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_CNVTMessage::clear_has_style() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_CNVTMessage::clear_style() {
  style_ = 0;
  clear_has_style();
}
::google::protobuf::int32 SymbolStatic_CNVTMessage::style() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.CNVTMessage.style)
  return style_;
}
void SymbolStatic_CNVTMessage::set_style(::google::protobuf::int32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.CNVTMessage.style)
}

// optional int32 cp = 2;
bool SymbolStatic_CNVTMessage::has_cp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolStatic_CNVTMessage::set_has_cp() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolStatic_CNVTMessage::clear_has_cp() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolStatic_CNVTMessage::clear_cp() {
  cp_ = 0;
  clear_has_cp();
}
::google::protobuf::int32 SymbolStatic_CNVTMessage::cp() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.CNVTMessage.cp)
  return cp_;
}
void SymbolStatic_CNVTMessage::set_cp(::google::protobuf::int32 value) {
  set_has_cp();
  cp_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.CNVTMessage.cp)
}

// optional float cnvt_ratio = 3;
bool SymbolStatic_CNVTMessage::has_cnvt_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolStatic_CNVTMessage::set_has_cnvt_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolStatic_CNVTMessage::clear_has_cnvt_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolStatic_CNVTMessage::clear_cnvt_ratio() {
  cnvt_ratio_ = 0;
  clear_has_cnvt_ratio();
}
float SymbolStatic_CNVTMessage::cnvt_ratio() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.CNVTMessage.cnvt_ratio)
  return cnvt_ratio_;
}
void SymbolStatic_CNVTMessage::set_cnvt_ratio(float value) {
  set_has_cnvt_ratio();
  cnvt_ratio_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.CNVTMessage.cnvt_ratio)
}

// optional float strike_price = 4;
bool SymbolStatic_CNVTMessage::has_strike_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolStatic_CNVTMessage::set_has_strike_price() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolStatic_CNVTMessage::clear_has_strike_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolStatic_CNVTMessage::clear_strike_price() {
  strike_price_ = 0;
  clear_has_strike_price();
}
float SymbolStatic_CNVTMessage::strike_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.CNVTMessage.strike_price)
  return strike_price_;
}
void SymbolStatic_CNVTMessage::set_strike_price(float value) {
  set_has_strike_price();
  strike_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.CNVTMessage.strike_price)
}

// optional uint32 maturity_date = 5;
bool SymbolStatic_CNVTMessage::has_maturity_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SymbolStatic_CNVTMessage::set_has_maturity_date() {
  _has_bits_[0] |= 0x00000020u;
}
void SymbolStatic_CNVTMessage::clear_has_maturity_date() {
  _has_bits_[0] &= ~0x00000020u;
}
void SymbolStatic_CNVTMessage::clear_maturity_date() {
  maturity_date_ = 0u;
  clear_has_maturity_date();
}
::google::protobuf::uint32 SymbolStatic_CNVTMessage::maturity_date() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.CNVTMessage.maturity_date)
  return maturity_date_;
}
void SymbolStatic_CNVTMessage::set_maturity_date(::google::protobuf::uint32 value) {
  set_has_maturity_date();
  maturity_date_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.CNVTMessage.maturity_date)
}

// optional bytes under_line = 6;
bool SymbolStatic_CNVTMessage::has_under_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_CNVTMessage::set_has_under_line() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_CNVTMessage::clear_has_under_line() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_CNVTMessage::clear_under_line() {
  under_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_under_line();
}
const ::std::string& SymbolStatic_CNVTMessage::under_line() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.CNVTMessage.under_line)
  return under_line_.GetNoArena();
}
void SymbolStatic_CNVTMessage::set_under_line(const ::std::string& value) {
  set_has_under_line();
  under_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.CNVTMessage.under_line)
}
#if LANG_CXX11
void SymbolStatic_CNVTMessage::set_under_line(::std::string&& value) {
  set_has_under_line();
  under_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chaos_data.SymbolStatic.CNVTMessage.under_line)
}
#endif
void SymbolStatic_CNVTMessage::set_under_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_under_line();
  under_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chaos_data.SymbolStatic.CNVTMessage.under_line)
}
void SymbolStatic_CNVTMessage::set_under_line(const void* value, size_t size) {
  set_has_under_line();
  under_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chaos_data.SymbolStatic.CNVTMessage.under_line)
}
::std::string* SymbolStatic_CNVTMessage::mutable_under_line() {
  set_has_under_line();
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.CNVTMessage.under_line)
  return under_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolStatic_CNVTMessage::release_under_line() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.CNVTMessage.under_line)
  clear_has_under_line();
  return under_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolStatic_CNVTMessage::set_allocated_under_line(::std::string* under_line) {
  if (under_line != NULL) {
    set_has_under_line();
  } else {
    clear_has_under_line();
  }
  under_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), under_line);
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.CNVTMessage.under_line)
}

// optional float accrued_int = 7;
bool SymbolStatic_CNVTMessage::has_accrued_int() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SymbolStatic_CNVTMessage::set_has_accrued_int() {
  _has_bits_[0] |= 0x00000040u;
}
void SymbolStatic_CNVTMessage::clear_has_accrued_int() {
  _has_bits_[0] &= ~0x00000040u;
}
void SymbolStatic_CNVTMessage::clear_accrued_int() {
  accrued_int_ = 0;
  clear_has_accrued_int();
}
float SymbolStatic_CNVTMessage::accrued_int() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.CNVTMessage.accrued_int)
  return accrued_int_;
}
void SymbolStatic_CNVTMessage::set_accrued_int(float value) {
  set_has_accrued_int();
  accrued_int_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.CNVTMessage.accrued_int)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_FutureMessage::kLastDayOIFieldNumber;
const int SymbolStatic_FutureMessage::kLastSettlePriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_FutureMessage::SymbolStatic_FutureMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.FutureMessage)
}
SymbolStatic_FutureMessage::SymbolStatic_FutureMessage(const SymbolStatic_FutureMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_day_oi_, &from.last_day_oi_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_settle_price_) -
    reinterpret_cast<char*>(&last_day_oi_)) + sizeof(last_settle_price_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.FutureMessage)
}

void SymbolStatic_FutureMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_day_oi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_settle_price_) -
      reinterpret_cast<char*>(&last_day_oi_)) + sizeof(last_settle_price_));
}

SymbolStatic_FutureMessage::~SymbolStatic_FutureMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.FutureMessage)
  SharedDtor();
}

void SymbolStatic_FutureMessage::SharedDtor() {
}

void SymbolStatic_FutureMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_FutureMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_FutureMessage& SymbolStatic_FutureMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_FutureMessage* SymbolStatic_FutureMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_FutureMessage* n = new SymbolStatic_FutureMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_FutureMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.FutureMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_day_oi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_settle_price_) -
        reinterpret_cast<char*>(&last_day_oi_)) + sizeof(last_settle_price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_FutureMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.FutureMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_day_OI = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_day_oi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_oi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float last_settle_price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_last_settle_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_settle_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.FutureMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.FutureMessage)
  return false;
#undef DO_
}

void SymbolStatic_FutureMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.FutureMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_day_OI = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_day_oi(), output);
  }

  // optional float last_settle_price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->last_settle_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.FutureMessage)
}

::google::protobuf::uint8* SymbolStatic_FutureMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.FutureMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_day_OI = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_day_oi(), target);
  }

  // optional float last_settle_price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->last_settle_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.FutureMessage)
  return target;
}

size_t SymbolStatic_FutureMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.FutureMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 last_day_OI = 1;
    if (has_last_day_oi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_oi());
    }

    // optional float last_settle_price = 2;
    if (has_last_settle_price()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_FutureMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.FutureMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_FutureMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_FutureMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.FutureMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.FutureMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_FutureMessage::MergeFrom(const SymbolStatic_FutureMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.FutureMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_day_oi_ = from.last_day_oi_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_settle_price_ = from.last_settle_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic_FutureMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.FutureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_FutureMessage::CopyFrom(const SymbolStatic_FutureMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.FutureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_FutureMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_FutureMessage::Swap(SymbolStatic_FutureMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_FutureMessage::InternalSwap(SymbolStatic_FutureMessage* other) {
  using std::swap;
  swap(last_day_oi_, other->last_day_oi_);
  swap(last_settle_price_, other->last_settle_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_FutureMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_FutureMessage

// optional uint32 last_day_OI = 1;
bool SymbolStatic_FutureMessage::has_last_day_oi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_FutureMessage::set_has_last_day_oi() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_FutureMessage::clear_has_last_day_oi() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_FutureMessage::clear_last_day_oi() {
  last_day_oi_ = 0u;
  clear_has_last_day_oi();
}
::google::protobuf::uint32 SymbolStatic_FutureMessage::last_day_oi() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.FutureMessage.last_day_OI)
  return last_day_oi_;
}
void SymbolStatic_FutureMessage::set_last_day_oi(::google::protobuf::uint32 value) {
  set_has_last_day_oi();
  last_day_oi_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.FutureMessage.last_day_OI)
}

// optional float last_settle_price = 2;
bool SymbolStatic_FutureMessage::has_last_settle_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_FutureMessage::set_has_last_settle_price() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_FutureMessage::clear_has_last_settle_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_FutureMessage::clear_last_settle_price() {
  last_settle_price_ = 0;
  clear_has_last_settle_price();
}
float SymbolStatic_FutureMessage::last_settle_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.FutureMessage.last_settle_price)
  return last_settle_price_;
}
void SymbolStatic_FutureMessage::set_last_settle_price(float value) {
  set_has_last_settle_price();
  last_settle_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.FutureMessage.last_settle_price)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_TruestMessage::kAssetFieldNumber;
const int SymbolStatic_TruestMessage::kAssetDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_TruestMessage::SymbolStatic_TruestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.TruestMessage)
}
SymbolStatic_TruestMessage::SymbolStatic_TruestMessage(const SymbolStatic_TruestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&asset_, &from.asset_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_date_) -
    reinterpret_cast<char*>(&asset_)) + sizeof(asset_date_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.TruestMessage)
}

void SymbolStatic_TruestMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&asset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asset_date_) -
      reinterpret_cast<char*>(&asset_)) + sizeof(asset_date_));
}

SymbolStatic_TruestMessage::~SymbolStatic_TruestMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.TruestMessage)
  SharedDtor();
}

void SymbolStatic_TruestMessage::SharedDtor() {
}

void SymbolStatic_TruestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_TruestMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_TruestMessage& SymbolStatic_TruestMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_TruestMessage* SymbolStatic_TruestMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_TruestMessage* n = new SymbolStatic_TruestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_TruestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.TruestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&asset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asset_date_) -
        reinterpret_cast<char*>(&asset_)) + sizeof(asset_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_TruestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.TruestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float asset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_asset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &asset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 asset_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_asset_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.TruestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.TruestMessage)
  return false;
#undef DO_
}

void SymbolStatic_TruestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.TruestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float asset = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->asset(), output);
  }

  // optional uint32 asset_date = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->asset_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.TruestMessage)
}

::google::protobuf::uint8* SymbolStatic_TruestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.TruestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float asset = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->asset(), target);
  }

  // optional uint32 asset_date = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->asset_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.TruestMessage)
  return target;
}

size_t SymbolStatic_TruestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.TruestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float asset = 3;
    if (has_asset()) {
      total_size += 1 + 4;
    }

    // optional uint32 asset_date = 4;
    if (has_asset_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset_date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_TruestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.TruestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_TruestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_TruestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.TruestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.TruestMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_TruestMessage::MergeFrom(const SymbolStatic_TruestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.TruestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      asset_ = from.asset_;
    }
    if (cached_has_bits & 0x00000002u) {
      asset_date_ = from.asset_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic_TruestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.TruestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_TruestMessage::CopyFrom(const SymbolStatic_TruestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.TruestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_TruestMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_TruestMessage::Swap(SymbolStatic_TruestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_TruestMessage::InternalSwap(SymbolStatic_TruestMessage* other) {
  using std::swap;
  swap(asset_, other->asset_);
  swap(asset_date_, other->asset_date_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_TruestMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_TruestMessage

// optional float asset = 3;
bool SymbolStatic_TruestMessage::has_asset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_TruestMessage::set_has_asset() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_TruestMessage::clear_has_asset() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_TruestMessage::clear_asset() {
  asset_ = 0;
  clear_has_asset();
}
float SymbolStatic_TruestMessage::asset() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.TruestMessage.asset)
  return asset_;
}
void SymbolStatic_TruestMessage::set_asset(float value) {
  set_has_asset();
  asset_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.TruestMessage.asset)
}

// optional uint32 asset_date = 4;
bool SymbolStatic_TruestMessage::has_asset_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_TruestMessage::set_has_asset_date() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_TruestMessage::clear_has_asset_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_TruestMessage::clear_asset_date() {
  asset_date_ = 0u;
  clear_has_asset_date();
}
::google::protobuf::uint32 SymbolStatic_TruestMessage::asset_date() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.TruestMessage.asset_date)
  return asset_date_;
}
void SymbolStatic_TruestMessage::set_asset_date(::google::protobuf::uint32 value) {
  set_has_asset_date();
  asset_date_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.TruestMessage.asset_date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic_SpecMessage::kEquityFieldNumber;
const int SymbolStatic_SpecMessage::kFundFieldNumber;
const int SymbolStatic_SpecMessage::kWarranFieldNumber;
const int SymbolStatic_SpecMessage::kBoundFieldNumber;
const int SymbolStatic_SpecMessage::kCnvtFieldNumber;
const int SymbolStatic_SpecMessage::kFutureFieldNumber;
const int SymbolStatic_SpecMessage::kTruestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic_SpecMessage::SymbolStatic_SpecMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic.SpecMessage)
}
SymbolStatic_SpecMessage::SymbolStatic_SpecMessage(const SymbolStatic_SpecMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equity()) {
    equity_ = new ::chaos_data::SymbolStatic_EquityMessage(*from.equity_);
  } else {
    equity_ = NULL;
  }
  if (from.has_fund()) {
    fund_ = new ::chaos_data::SymbolStatic_FundMessage(*from.fund_);
  } else {
    fund_ = NULL;
  }
  if (from.has_warran()) {
    warran_ = new ::chaos_data::SymbolStatic_WarranMessage(*from.warran_);
  } else {
    warran_ = NULL;
  }
  if (from.has_bound()) {
    bound_ = new ::chaos_data::SymbolStatic_BoundMessage(*from.bound_);
  } else {
    bound_ = NULL;
  }
  if (from.has_cnvt()) {
    cnvt_ = new ::chaos_data::SymbolStatic_CNVTMessage(*from.cnvt_);
  } else {
    cnvt_ = NULL;
  }
  if (from.has_future()) {
    future_ = new ::chaos_data::SymbolStatic_FutureMessage(*from.future_);
  } else {
    future_ = NULL;
  }
  if (from.has_truest()) {
    truest_ = new ::chaos_data::SymbolStatic_TruestMessage(*from.truest_);
  } else {
    truest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic.SpecMessage)
}

void SymbolStatic_SpecMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&equity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&truest_) -
      reinterpret_cast<char*>(&equity_)) + sizeof(truest_));
}

SymbolStatic_SpecMessage::~SymbolStatic_SpecMessage() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic.SpecMessage)
  SharedDtor();
}

void SymbolStatic_SpecMessage::SharedDtor() {
  if (this != internal_default_instance()) delete equity_;
  if (this != internal_default_instance()) delete fund_;
  if (this != internal_default_instance()) delete warran_;
  if (this != internal_default_instance()) delete bound_;
  if (this != internal_default_instance()) delete cnvt_;
  if (this != internal_default_instance()) delete future_;
  if (this != internal_default_instance()) delete truest_;
}

void SymbolStatic_SpecMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic_SpecMessage::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic_SpecMessage& SymbolStatic_SpecMessage::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic_SpecMessage* SymbolStatic_SpecMessage::New(::google::protobuf::Arena* arena) const {
  SymbolStatic_SpecMessage* n = new SymbolStatic_SpecMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic_SpecMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic.SpecMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(equity_ != NULL);
      equity_->::chaos_data::SymbolStatic_EquityMessage::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fund_ != NULL);
      fund_->::chaos_data::SymbolStatic_FundMessage::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(warran_ != NULL);
      warran_->::chaos_data::SymbolStatic_WarranMessage::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bound_ != NULL);
      bound_->::chaos_data::SymbolStatic_BoundMessage::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cnvt_ != NULL);
      cnvt_->::chaos_data::SymbolStatic_CNVTMessage::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(future_ != NULL);
      future_->::chaos_data::SymbolStatic_FutureMessage::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(truest_ != NULL);
      truest_->::chaos_data::SymbolStatic_TruestMessage::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic_SpecMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic.SpecMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chaos_data.SymbolStatic.EquityMessage equity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.FundMessage fund = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fund()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.WarranMessage warran = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warran()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.BoundMessage bound = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.CNVTMessage cnvt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cnvt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.FutureMessage future = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_future()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.TruestMessage truest = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic.SpecMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic.SpecMessage)
  return false;
#undef DO_
}

void SymbolStatic_SpecMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic.SpecMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chaos_data.SymbolStatic.EquityMessage equity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->equity_, output);
  }

  // optional .chaos_data.SymbolStatic.FundMessage fund = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fund_, output);
  }

  // optional .chaos_data.SymbolStatic.WarranMessage warran = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->warran_, output);
  }

  // optional .chaos_data.SymbolStatic.BoundMessage bound = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bound_, output);
  }

  // optional .chaos_data.SymbolStatic.CNVTMessage cnvt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cnvt_, output);
  }

  // optional .chaos_data.SymbolStatic.FutureMessage future = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->future_, output);
  }

  // optional .chaos_data.SymbolStatic.TruestMessage truest = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->truest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic.SpecMessage)
}

::google::protobuf::uint8* SymbolStatic_SpecMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic.SpecMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chaos_data.SymbolStatic.EquityMessage equity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->equity_, deterministic, target);
  }

  // optional .chaos_data.SymbolStatic.FundMessage fund = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fund_, deterministic, target);
  }

  // optional .chaos_data.SymbolStatic.WarranMessage warran = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->warran_, deterministic, target);
  }

  // optional .chaos_data.SymbolStatic.BoundMessage bound = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bound_, deterministic, target);
  }

  // optional .chaos_data.SymbolStatic.CNVTMessage cnvt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cnvt_, deterministic, target);
  }

  // optional .chaos_data.SymbolStatic.FutureMessage future = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->future_, deterministic, target);
  }

  // optional .chaos_data.SymbolStatic.TruestMessage truest = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->truest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic.SpecMessage)
  return target;
}

size_t SymbolStatic_SpecMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic.SpecMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .chaos_data.SymbolStatic.EquityMessage equity = 1;
    if (has_equity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->equity_);
    }

    // optional .chaos_data.SymbolStatic.FundMessage fund = 2;
    if (has_fund()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fund_);
    }

    // optional .chaos_data.SymbolStatic.WarranMessage warran = 3;
    if (has_warran()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->warran_);
    }

    // optional .chaos_data.SymbolStatic.BoundMessage bound = 4;
    if (has_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bound_);
    }

    // optional .chaos_data.SymbolStatic.CNVTMessage cnvt = 5;
    if (has_cnvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cnvt_);
    }

    // optional .chaos_data.SymbolStatic.FutureMessage future = 6;
    if (has_future()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->future_);
    }

    // optional .chaos_data.SymbolStatic.TruestMessage truest = 7;
    if (has_truest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->truest_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic_SpecMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic.SpecMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic_SpecMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic_SpecMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic.SpecMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic.SpecMessage)
    MergeFrom(*source);
  }
}

void SymbolStatic_SpecMessage::MergeFrom(const SymbolStatic_SpecMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic.SpecMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equity()->::chaos_data::SymbolStatic_EquityMessage::MergeFrom(from.equity());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fund()->::chaos_data::SymbolStatic_FundMessage::MergeFrom(from.fund());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_warran()->::chaos_data::SymbolStatic_WarranMessage::MergeFrom(from.warran());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bound()->::chaos_data::SymbolStatic_BoundMessage::MergeFrom(from.bound());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_cnvt()->::chaos_data::SymbolStatic_CNVTMessage::MergeFrom(from.cnvt());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_future()->::chaos_data::SymbolStatic_FutureMessage::MergeFrom(from.future());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_truest()->::chaos_data::SymbolStatic_TruestMessage::MergeFrom(from.truest());
    }
  }
}

void SymbolStatic_SpecMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic.SpecMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic_SpecMessage::CopyFrom(const SymbolStatic_SpecMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic.SpecMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic_SpecMessage::IsInitialized() const {
  return true;
}

void SymbolStatic_SpecMessage::Swap(SymbolStatic_SpecMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic_SpecMessage::InternalSwap(SymbolStatic_SpecMessage* other) {
  using std::swap;
  swap(equity_, other->equity_);
  swap(fund_, other->fund_);
  swap(warran_, other->warran_);
  swap(bound_, other->bound_);
  swap(cnvt_, other->cnvt_);
  swap(future_, other->future_);
  swap(truest_, other->truest_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic_SpecMessage::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic_SpecMessage

// optional .chaos_data.SymbolStatic.EquityMessage equity = 1;
bool SymbolStatic_SpecMessage::has_equity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic_SpecMessage::set_has_equity() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic_SpecMessage::clear_has_equity() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic_SpecMessage::clear_equity() {
  if (equity_ != NULL) equity_->::chaos_data::SymbolStatic_EquityMessage::Clear();
  clear_has_equity();
}
const ::chaos_data::SymbolStatic_EquityMessage& SymbolStatic_SpecMessage::equity() const {
  const ::chaos_data::SymbolStatic_EquityMessage* p = equity_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.SpecMessage.equity)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_EquityMessage*>(
      &::chaos_data::_SymbolStatic_EquityMessage_default_instance_);
}
::chaos_data::SymbolStatic_EquityMessage* SymbolStatic_SpecMessage::mutable_equity() {
  set_has_equity();
  if (equity_ == NULL) {
    equity_ = new ::chaos_data::SymbolStatic_EquityMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.SpecMessage.equity)
  return equity_;
}
::chaos_data::SymbolStatic_EquityMessage* SymbolStatic_SpecMessage::release_equity() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.SpecMessage.equity)
  clear_has_equity();
  ::chaos_data::SymbolStatic_EquityMessage* temp = equity_;
  equity_ = NULL;
  return temp;
}
void SymbolStatic_SpecMessage::set_allocated_equity(::chaos_data::SymbolStatic_EquityMessage* equity) {
  delete equity_;
  equity_ = equity;
  if (equity) {
    set_has_equity();
  } else {
    clear_has_equity();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.SpecMessage.equity)
}

// optional .chaos_data.SymbolStatic.FundMessage fund = 2;
bool SymbolStatic_SpecMessage::has_fund() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic_SpecMessage::set_has_fund() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic_SpecMessage::clear_has_fund() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic_SpecMessage::clear_fund() {
  if (fund_ != NULL) fund_->::chaos_data::SymbolStatic_FundMessage::Clear();
  clear_has_fund();
}
const ::chaos_data::SymbolStatic_FundMessage& SymbolStatic_SpecMessage::fund() const {
  const ::chaos_data::SymbolStatic_FundMessage* p = fund_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.SpecMessage.fund)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_FundMessage*>(
      &::chaos_data::_SymbolStatic_FundMessage_default_instance_);
}
::chaos_data::SymbolStatic_FundMessage* SymbolStatic_SpecMessage::mutable_fund() {
  set_has_fund();
  if (fund_ == NULL) {
    fund_ = new ::chaos_data::SymbolStatic_FundMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.SpecMessage.fund)
  return fund_;
}
::chaos_data::SymbolStatic_FundMessage* SymbolStatic_SpecMessage::release_fund() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.SpecMessage.fund)
  clear_has_fund();
  ::chaos_data::SymbolStatic_FundMessage* temp = fund_;
  fund_ = NULL;
  return temp;
}
void SymbolStatic_SpecMessage::set_allocated_fund(::chaos_data::SymbolStatic_FundMessage* fund) {
  delete fund_;
  fund_ = fund;
  if (fund) {
    set_has_fund();
  } else {
    clear_has_fund();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.SpecMessage.fund)
}

// optional .chaos_data.SymbolStatic.WarranMessage warran = 3;
bool SymbolStatic_SpecMessage::has_warran() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolStatic_SpecMessage::set_has_warran() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolStatic_SpecMessage::clear_has_warran() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolStatic_SpecMessage::clear_warran() {
  if (warran_ != NULL) warran_->::chaos_data::SymbolStatic_WarranMessage::Clear();
  clear_has_warran();
}
const ::chaos_data::SymbolStatic_WarranMessage& SymbolStatic_SpecMessage::warran() const {
  const ::chaos_data::SymbolStatic_WarranMessage* p = warran_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.SpecMessage.warran)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_WarranMessage*>(
      &::chaos_data::_SymbolStatic_WarranMessage_default_instance_);
}
::chaos_data::SymbolStatic_WarranMessage* SymbolStatic_SpecMessage::mutable_warran() {
  set_has_warran();
  if (warran_ == NULL) {
    warran_ = new ::chaos_data::SymbolStatic_WarranMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.SpecMessage.warran)
  return warran_;
}
::chaos_data::SymbolStatic_WarranMessage* SymbolStatic_SpecMessage::release_warran() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.SpecMessage.warran)
  clear_has_warran();
  ::chaos_data::SymbolStatic_WarranMessage* temp = warran_;
  warran_ = NULL;
  return temp;
}
void SymbolStatic_SpecMessage::set_allocated_warran(::chaos_data::SymbolStatic_WarranMessage* warran) {
  delete warran_;
  warran_ = warran;
  if (warran) {
    set_has_warran();
  } else {
    clear_has_warran();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.SpecMessage.warran)
}

// optional .chaos_data.SymbolStatic.BoundMessage bound = 4;
bool SymbolStatic_SpecMessage::has_bound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolStatic_SpecMessage::set_has_bound() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolStatic_SpecMessage::clear_has_bound() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolStatic_SpecMessage::clear_bound() {
  if (bound_ != NULL) bound_->::chaos_data::SymbolStatic_BoundMessage::Clear();
  clear_has_bound();
}
const ::chaos_data::SymbolStatic_BoundMessage& SymbolStatic_SpecMessage::bound() const {
  const ::chaos_data::SymbolStatic_BoundMessage* p = bound_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.SpecMessage.bound)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_BoundMessage*>(
      &::chaos_data::_SymbolStatic_BoundMessage_default_instance_);
}
::chaos_data::SymbolStatic_BoundMessage* SymbolStatic_SpecMessage::mutable_bound() {
  set_has_bound();
  if (bound_ == NULL) {
    bound_ = new ::chaos_data::SymbolStatic_BoundMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.SpecMessage.bound)
  return bound_;
}
::chaos_data::SymbolStatic_BoundMessage* SymbolStatic_SpecMessage::release_bound() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.SpecMessage.bound)
  clear_has_bound();
  ::chaos_data::SymbolStatic_BoundMessage* temp = bound_;
  bound_ = NULL;
  return temp;
}
void SymbolStatic_SpecMessage::set_allocated_bound(::chaos_data::SymbolStatic_BoundMessage* bound) {
  delete bound_;
  bound_ = bound;
  if (bound) {
    set_has_bound();
  } else {
    clear_has_bound();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.SpecMessage.bound)
}

// optional .chaos_data.SymbolStatic.CNVTMessage cnvt = 5;
bool SymbolStatic_SpecMessage::has_cnvt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolStatic_SpecMessage::set_has_cnvt() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolStatic_SpecMessage::clear_has_cnvt() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolStatic_SpecMessage::clear_cnvt() {
  if (cnvt_ != NULL) cnvt_->::chaos_data::SymbolStatic_CNVTMessage::Clear();
  clear_has_cnvt();
}
const ::chaos_data::SymbolStatic_CNVTMessage& SymbolStatic_SpecMessage::cnvt() const {
  const ::chaos_data::SymbolStatic_CNVTMessage* p = cnvt_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.SpecMessage.cnvt)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_CNVTMessage*>(
      &::chaos_data::_SymbolStatic_CNVTMessage_default_instance_);
}
::chaos_data::SymbolStatic_CNVTMessage* SymbolStatic_SpecMessage::mutable_cnvt() {
  set_has_cnvt();
  if (cnvt_ == NULL) {
    cnvt_ = new ::chaos_data::SymbolStatic_CNVTMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.SpecMessage.cnvt)
  return cnvt_;
}
::chaos_data::SymbolStatic_CNVTMessage* SymbolStatic_SpecMessage::release_cnvt() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.SpecMessage.cnvt)
  clear_has_cnvt();
  ::chaos_data::SymbolStatic_CNVTMessage* temp = cnvt_;
  cnvt_ = NULL;
  return temp;
}
void SymbolStatic_SpecMessage::set_allocated_cnvt(::chaos_data::SymbolStatic_CNVTMessage* cnvt) {
  delete cnvt_;
  cnvt_ = cnvt;
  if (cnvt) {
    set_has_cnvt();
  } else {
    clear_has_cnvt();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.SpecMessage.cnvt)
}

// optional .chaos_data.SymbolStatic.FutureMessage future = 6;
bool SymbolStatic_SpecMessage::has_future() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SymbolStatic_SpecMessage::set_has_future() {
  _has_bits_[0] |= 0x00000020u;
}
void SymbolStatic_SpecMessage::clear_has_future() {
  _has_bits_[0] &= ~0x00000020u;
}
void SymbolStatic_SpecMessage::clear_future() {
  if (future_ != NULL) future_->::chaos_data::SymbolStatic_FutureMessage::Clear();
  clear_has_future();
}
const ::chaos_data::SymbolStatic_FutureMessage& SymbolStatic_SpecMessage::future() const {
  const ::chaos_data::SymbolStatic_FutureMessage* p = future_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.SpecMessage.future)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_FutureMessage*>(
      &::chaos_data::_SymbolStatic_FutureMessage_default_instance_);
}
::chaos_data::SymbolStatic_FutureMessage* SymbolStatic_SpecMessage::mutable_future() {
  set_has_future();
  if (future_ == NULL) {
    future_ = new ::chaos_data::SymbolStatic_FutureMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.SpecMessage.future)
  return future_;
}
::chaos_data::SymbolStatic_FutureMessage* SymbolStatic_SpecMessage::release_future() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.SpecMessage.future)
  clear_has_future();
  ::chaos_data::SymbolStatic_FutureMessage* temp = future_;
  future_ = NULL;
  return temp;
}
void SymbolStatic_SpecMessage::set_allocated_future(::chaos_data::SymbolStatic_FutureMessage* future) {
  delete future_;
  future_ = future;
  if (future) {
    set_has_future();
  } else {
    clear_has_future();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.SpecMessage.future)
}

// optional .chaos_data.SymbolStatic.TruestMessage truest = 7;
bool SymbolStatic_SpecMessage::has_truest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SymbolStatic_SpecMessage::set_has_truest() {
  _has_bits_[0] |= 0x00000040u;
}
void SymbolStatic_SpecMessage::clear_has_truest() {
  _has_bits_[0] &= ~0x00000040u;
}
void SymbolStatic_SpecMessage::clear_truest() {
  if (truest_ != NULL) truest_->::chaos_data::SymbolStatic_TruestMessage::Clear();
  clear_has_truest();
}
const ::chaos_data::SymbolStatic_TruestMessage& SymbolStatic_SpecMessage::truest() const {
  const ::chaos_data::SymbolStatic_TruestMessage* p = truest_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.SpecMessage.truest)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_TruestMessage*>(
      &::chaos_data::_SymbolStatic_TruestMessage_default_instance_);
}
::chaos_data::SymbolStatic_TruestMessage* SymbolStatic_SpecMessage::mutable_truest() {
  set_has_truest();
  if (truest_ == NULL) {
    truest_ = new ::chaos_data::SymbolStatic_TruestMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.SpecMessage.truest)
  return truest_;
}
::chaos_data::SymbolStatic_TruestMessage* SymbolStatic_SpecMessage::release_truest() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.SpecMessage.truest)
  clear_has_truest();
  ::chaos_data::SymbolStatic_TruestMessage* temp = truest_;
  truest_ = NULL;
  return temp;
}
void SymbolStatic_SpecMessage::set_allocated_truest(::chaos_data::SymbolStatic_TruestMessage* truest) {
  delete truest_;
  truest_ = truest;
  if (truest) {
    set_has_truest();
  } else {
    clear_has_truest();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.SpecMessage.truest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolStatic::kSymbolFieldNumber;
const int SymbolStatic::kNameFieldNumber;
const int SymbolStatic::kCtypeFieldNumber;
const int SymbolStatic::kCsubTypeFieldNumber;
const int SymbolStatic::kMarketMtkFieldNumber;
const int SymbolStatic::kMarketDateFieldNumber;
const int SymbolStatic::kHisCountFieldNumber;
const int SymbolStatic::kPriceDigitFieldNumber;
const int SymbolStatic::kVolUnitFieldNumber;
const int SymbolStatic::kFloatIssuedFieldNumber;
const int SymbolStatic::kTotalIssuedFieldNumber;
const int SymbolStatic::kLastCloseFieldNumber;
const int SymbolStatic::kAdvStopFieldNumber;
const int SymbolStatic::kDecStopFieldNumber;
const int SymbolStatic::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolStatic::SymbolStatic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fstatic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolStatic)
}
SymbolStatic::SymbolStatic(const SymbolStatic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  market_mtk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_market_mtk()) {
    market_mtk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_mtk_);
  }
  if (from.has_spec()) {
    spec_ = new ::chaos_data::SymbolStatic_SpecMessage(*from.spec_);
  } else {
    spec_ = NULL;
  }
  ::memcpy(&ctype_, &from.ctype_,
    static_cast<size_t>(reinterpret_cast<char*>(&dec_stop_) -
    reinterpret_cast<char*>(&ctype_)) + sizeof(dec_stop_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolStatic)
}

void SymbolStatic::SharedCtor() {
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_mtk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dec_stop_) -
      reinterpret_cast<char*>(&spec_)) + sizeof(dec_stop_));
}

SymbolStatic::~SymbolStatic() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolStatic)
  SharedDtor();
}

void SymbolStatic::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_mtk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
}

void SymbolStatic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolStatic::descriptor() {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolStatic& SymbolStatic::default_instance() {
  protobuf_symbol_5fstatic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolStatic* SymbolStatic::New(::google::protobuf::Arena* arena) const {
  SymbolStatic* n = new SymbolStatic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolStatic::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*symbol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!market_mtk_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*market_mtk_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(spec_ != NULL);
      spec_->::chaos_data::SymbolStatic_SpecMessage::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&ctype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&his_count_) -
        reinterpret_cast<char*>(&ctype_)) + sizeof(his_count_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&price_digit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dec_stop_) -
        reinterpret_cast<char*>(&price_digit_)) + sizeof(dec_stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolStatic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolStatic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.SYMBOL_TYPE ctype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chaos_data::SymbolStatic_SYMBOL_TYPE_IsValid(value)) {
            set_ctype(static_cast< ::chaos_data::SymbolStatic_SYMBOL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.SYMBOL_SUBTYPE csub_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chaos_data::SymbolStatic_SYMBOL_SUBTYPE_IsValid(value)) {
            set_csub_type(static_cast< ::chaos_data::SymbolStatic_SYMBOL_SUBTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes market_mtk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_market_mtk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 market_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_market_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &market_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 his_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_his_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 price_digit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_price_digit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_digit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vol_unit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_vol_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vol_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 float_issued = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_float_issued();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_issued_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_issued = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_total_issued();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_issued_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_close = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_last_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 adv_stop = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_adv_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adv_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dec_stop = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_dec_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dec_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chaos_data.SymbolStatic.SpecMessage spec = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolStatic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolStatic)
  return false;
#undef DO_
}

void SymbolStatic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->symbol(), output);
  }

  // optional bytes name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional .chaos_data.SymbolStatic.SYMBOL_TYPE ctype = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ctype(), output);
  }

  // optional .chaos_data.SymbolStatic.SYMBOL_SUBTYPE csub_type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->csub_type(), output);
  }

  // optional bytes market_mtk = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->market_mtk(), output);
  }

  // optional uint32 market_date = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->market_date(), output);
  }

  // optional uint32 his_count = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->his_count(), output);
  }

  // optional uint32 price_digit = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->price_digit(), output);
  }

  // optional int32 vol_unit = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vol_unit(), output);
  }

  // optional int64 float_issued = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->float_issued(), output);
  }

  // optional int64 total_issued = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->total_issued(), output);
  }

  // optional uint32 last_close = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->last_close(), output);
  }

  // optional uint32 adv_stop = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->adv_stop(), output);
  }

  // optional uint32 dec_stop = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dec_stop(), output);
  }

  // optional .chaos_data.SymbolStatic.SpecMessage spec = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->spec_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolStatic)
}

::google::protobuf::uint8* SymbolStatic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->symbol(), target);
  }

  // optional bytes name = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional .chaos_data.SymbolStatic.SYMBOL_TYPE ctype = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ctype(), target);
  }

  // optional .chaos_data.SymbolStatic.SYMBOL_SUBTYPE csub_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->csub_type(), target);
  }

  // optional bytes market_mtk = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->market_mtk(), target);
  }

  // optional uint32 market_date = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->market_date(), target);
  }

  // optional uint32 his_count = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->his_count(), target);
  }

  // optional uint32 price_digit = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->price_digit(), target);
  }

  // optional int32 vol_unit = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vol_unit(), target);
  }

  // optional int64 float_issued = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->float_issued(), target);
  }

  // optional int64 total_issued = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->total_issued(), target);
  }

  // optional uint32 last_close = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->last_close(), target);
  }

  // optional uint32 adv_stop = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->adv_stop(), target);
  }

  // optional uint32 dec_stop = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dec_stop(), target);
  }

  // optional .chaos_data.SymbolStatic.SpecMessage spec = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->spec_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolStatic)
  return target;
}

size_t SymbolStatic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolStatic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->symbol());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes market_mtk = 5;
    if (has_market_mtk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->market_mtk());
    }

    // optional .chaos_data.SymbolStatic.SpecMessage spec = 15;
    if (has_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spec_);
    }

    // optional .chaos_data.SymbolStatic.SYMBOL_TYPE ctype = 3;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());
    }

    // optional .chaos_data.SymbolStatic.SYMBOL_SUBTYPE csub_type = 4;
    if (has_csub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->csub_type());
    }

    // optional uint32 market_date = 6;
    if (has_market_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->market_date());
    }

    // optional uint32 his_count = 7;
    if (has_his_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_count());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 price_digit = 8;
    if (has_price_digit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_digit());
    }

    // optional int32 vol_unit = 9;
    if (has_vol_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vol_unit());
    }

    // optional int64 float_issued = 10;
    if (has_float_issued()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->float_issued());
    }

    // optional int64 total_issued = 11;
    if (has_total_issued()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_issued());
    }

    // optional uint32 last_close = 12;
    if (has_last_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_close());
    }

    // optional uint32 adv_stop = 13;
    if (has_adv_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adv_stop());
    }

    // optional uint32 dec_stop = 14;
    if (has_dec_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dec_stop());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolStatic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolStatic)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolStatic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolStatic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolStatic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolStatic)
    MergeFrom(*source);
  }
}

void SymbolStatic::MergeFrom(const SymbolStatic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolStatic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_market_mtk();
      market_mtk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_mtk_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_spec()->::chaos_data::SymbolStatic_SpecMessage::MergeFrom(from.spec());
    }
    if (cached_has_bits & 0x00000010u) {
      ctype_ = from.ctype_;
    }
    if (cached_has_bits & 0x00000020u) {
      csub_type_ = from.csub_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      market_date_ = from.market_date_;
    }
    if (cached_has_bits & 0x00000080u) {
      his_count_ = from.his_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      price_digit_ = from.price_digit_;
    }
    if (cached_has_bits & 0x00000200u) {
      vol_unit_ = from.vol_unit_;
    }
    if (cached_has_bits & 0x00000400u) {
      float_issued_ = from.float_issued_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_issued_ = from.total_issued_;
    }
    if (cached_has_bits & 0x00001000u) {
      last_close_ = from.last_close_;
    }
    if (cached_has_bits & 0x00002000u) {
      adv_stop_ = from.adv_stop_;
    }
    if (cached_has_bits & 0x00004000u) {
      dec_stop_ = from.dec_stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolStatic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolStatic::CopyFrom(const SymbolStatic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolStatic::IsInitialized() const {
  return true;
}

void SymbolStatic::Swap(SymbolStatic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolStatic::InternalSwap(SymbolStatic* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  name_.Swap(&other->name_);
  market_mtk_.Swap(&other->market_mtk_);
  swap(spec_, other->spec_);
  swap(ctype_, other->ctype_);
  swap(csub_type_, other->csub_type_);
  swap(market_date_, other->market_date_);
  swap(his_count_, other->his_count_);
  swap(price_digit_, other->price_digit_);
  swap(vol_unit_, other->vol_unit_);
  swap(float_issued_, other->float_issued_);
  swap(total_issued_, other->total_issued_);
  swap(last_close_, other->last_close_);
  swap(adv_stop_, other->adv_stop_);
  swap(dec_stop_, other->dec_stop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolStatic::GetMetadata() const {
  protobuf_symbol_5fstatic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fstatic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolStatic

// optional bytes symbol = 1;
bool SymbolStatic::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolStatic::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolStatic::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolStatic::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
const ::std::string& SymbolStatic::symbol() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.symbol)
  return symbol_.GetNoArena();
}
void SymbolStatic::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.symbol)
}
#if LANG_CXX11
void SymbolStatic::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chaos_data.SymbolStatic.symbol)
}
#endif
void SymbolStatic::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chaos_data.SymbolStatic.symbol)
}
void SymbolStatic::set_symbol(const void* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chaos_data.SymbolStatic.symbol)
}
::std::string* SymbolStatic::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolStatic::release_symbol() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolStatic::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.symbol)
}

// optional bytes name = 2;
bool SymbolStatic::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolStatic::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolStatic::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolStatic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SymbolStatic::name() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.name)
  return name_.GetNoArena();
}
void SymbolStatic::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.name)
}
#if LANG_CXX11
void SymbolStatic::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chaos_data.SymbolStatic.name)
}
#endif
void SymbolStatic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chaos_data.SymbolStatic.name)
}
void SymbolStatic::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chaos_data.SymbolStatic.name)
}
::std::string* SymbolStatic::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolStatic::release_name() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolStatic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.name)
}

// optional .chaos_data.SymbolStatic.SYMBOL_TYPE ctype = 3;
bool SymbolStatic::has_ctype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolStatic::set_has_ctype() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolStatic::clear_has_ctype() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolStatic::clear_ctype() {
  ctype_ = 0;
  clear_has_ctype();
}
::chaos_data::SymbolStatic_SYMBOL_TYPE SymbolStatic::ctype() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.ctype)
  return static_cast< ::chaos_data::SymbolStatic_SYMBOL_TYPE >(ctype_);
}
void SymbolStatic::set_ctype(::chaos_data::SymbolStatic_SYMBOL_TYPE value) {
  assert(::chaos_data::SymbolStatic_SYMBOL_TYPE_IsValid(value));
  set_has_ctype();
  ctype_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.ctype)
}

// optional .chaos_data.SymbolStatic.SYMBOL_SUBTYPE csub_type = 4;
bool SymbolStatic::has_csub_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SymbolStatic::set_has_csub_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SymbolStatic::clear_has_csub_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SymbolStatic::clear_csub_type() {
  csub_type_ = 0;
  clear_has_csub_type();
}
::chaos_data::SymbolStatic_SYMBOL_SUBTYPE SymbolStatic::csub_type() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.csub_type)
  return static_cast< ::chaos_data::SymbolStatic_SYMBOL_SUBTYPE >(csub_type_);
}
void SymbolStatic::set_csub_type(::chaos_data::SymbolStatic_SYMBOL_SUBTYPE value) {
  assert(::chaos_data::SymbolStatic_SYMBOL_SUBTYPE_IsValid(value));
  set_has_csub_type();
  csub_type_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.csub_type)
}

// optional bytes market_mtk = 5;
bool SymbolStatic::has_market_mtk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolStatic::set_has_market_mtk() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolStatic::clear_has_market_mtk() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolStatic::clear_market_mtk() {
  market_mtk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_market_mtk();
}
const ::std::string& SymbolStatic::market_mtk() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.market_mtk)
  return market_mtk_.GetNoArena();
}
void SymbolStatic::set_market_mtk(const ::std::string& value) {
  set_has_market_mtk();
  market_mtk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.market_mtk)
}
#if LANG_CXX11
void SymbolStatic::set_market_mtk(::std::string&& value) {
  set_has_market_mtk();
  market_mtk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chaos_data.SymbolStatic.market_mtk)
}
#endif
void SymbolStatic::set_market_mtk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_market_mtk();
  market_mtk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chaos_data.SymbolStatic.market_mtk)
}
void SymbolStatic::set_market_mtk(const void* value, size_t size) {
  set_has_market_mtk();
  market_mtk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chaos_data.SymbolStatic.market_mtk)
}
::std::string* SymbolStatic::mutable_market_mtk() {
  set_has_market_mtk();
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.market_mtk)
  return market_mtk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolStatic::release_market_mtk() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.market_mtk)
  clear_has_market_mtk();
  return market_mtk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolStatic::set_allocated_market_mtk(::std::string* market_mtk) {
  if (market_mtk != NULL) {
    set_has_market_mtk();
  } else {
    clear_has_market_mtk();
  }
  market_mtk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market_mtk);
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.market_mtk)
}

// optional uint32 market_date = 6;
bool SymbolStatic::has_market_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SymbolStatic::set_has_market_date() {
  _has_bits_[0] |= 0x00000040u;
}
void SymbolStatic::clear_has_market_date() {
  _has_bits_[0] &= ~0x00000040u;
}
void SymbolStatic::clear_market_date() {
  market_date_ = 0u;
  clear_has_market_date();
}
::google::protobuf::uint32 SymbolStatic::market_date() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.market_date)
  return market_date_;
}
void SymbolStatic::set_market_date(::google::protobuf::uint32 value) {
  set_has_market_date();
  market_date_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.market_date)
}

// optional uint32 his_count = 7;
bool SymbolStatic::has_his_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SymbolStatic::set_has_his_count() {
  _has_bits_[0] |= 0x00000080u;
}
void SymbolStatic::clear_has_his_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void SymbolStatic::clear_his_count() {
  his_count_ = 0u;
  clear_has_his_count();
}
::google::protobuf::uint32 SymbolStatic::his_count() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.his_count)
  return his_count_;
}
void SymbolStatic::set_his_count(::google::protobuf::uint32 value) {
  set_has_his_count();
  his_count_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.his_count)
}

// optional uint32 price_digit = 8;
bool SymbolStatic::has_price_digit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SymbolStatic::set_has_price_digit() {
  _has_bits_[0] |= 0x00000100u;
}
void SymbolStatic::clear_has_price_digit() {
  _has_bits_[0] &= ~0x00000100u;
}
void SymbolStatic::clear_price_digit() {
  price_digit_ = 0u;
  clear_has_price_digit();
}
::google::protobuf::uint32 SymbolStatic::price_digit() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.price_digit)
  return price_digit_;
}
void SymbolStatic::set_price_digit(::google::protobuf::uint32 value) {
  set_has_price_digit();
  price_digit_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.price_digit)
}

// optional int32 vol_unit = 9;
bool SymbolStatic::has_vol_unit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SymbolStatic::set_has_vol_unit() {
  _has_bits_[0] |= 0x00000200u;
}
void SymbolStatic::clear_has_vol_unit() {
  _has_bits_[0] &= ~0x00000200u;
}
void SymbolStatic::clear_vol_unit() {
  vol_unit_ = 0;
  clear_has_vol_unit();
}
::google::protobuf::int32 SymbolStatic::vol_unit() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.vol_unit)
  return vol_unit_;
}
void SymbolStatic::set_vol_unit(::google::protobuf::int32 value) {
  set_has_vol_unit();
  vol_unit_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.vol_unit)
}

// optional int64 float_issued = 10;
bool SymbolStatic::has_float_issued() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SymbolStatic::set_has_float_issued() {
  _has_bits_[0] |= 0x00000400u;
}
void SymbolStatic::clear_has_float_issued() {
  _has_bits_[0] &= ~0x00000400u;
}
void SymbolStatic::clear_float_issued() {
  float_issued_ = GOOGLE_LONGLONG(0);
  clear_has_float_issued();
}
::google::protobuf::int64 SymbolStatic::float_issued() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.float_issued)
  return float_issued_;
}
void SymbolStatic::set_float_issued(::google::protobuf::int64 value) {
  set_has_float_issued();
  float_issued_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.float_issued)
}

// optional int64 total_issued = 11;
bool SymbolStatic::has_total_issued() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SymbolStatic::set_has_total_issued() {
  _has_bits_[0] |= 0x00000800u;
}
void SymbolStatic::clear_has_total_issued() {
  _has_bits_[0] &= ~0x00000800u;
}
void SymbolStatic::clear_total_issued() {
  total_issued_ = GOOGLE_LONGLONG(0);
  clear_has_total_issued();
}
::google::protobuf::int64 SymbolStatic::total_issued() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.total_issued)
  return total_issued_;
}
void SymbolStatic::set_total_issued(::google::protobuf::int64 value) {
  set_has_total_issued();
  total_issued_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.total_issued)
}

// optional uint32 last_close = 12;
bool SymbolStatic::has_last_close() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SymbolStatic::set_has_last_close() {
  _has_bits_[0] |= 0x00001000u;
}
void SymbolStatic::clear_has_last_close() {
  _has_bits_[0] &= ~0x00001000u;
}
void SymbolStatic::clear_last_close() {
  last_close_ = 0u;
  clear_has_last_close();
}
::google::protobuf::uint32 SymbolStatic::last_close() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.last_close)
  return last_close_;
}
void SymbolStatic::set_last_close(::google::protobuf::uint32 value) {
  set_has_last_close();
  last_close_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.last_close)
}

// optional uint32 adv_stop = 13;
bool SymbolStatic::has_adv_stop() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SymbolStatic::set_has_adv_stop() {
  _has_bits_[0] |= 0x00002000u;
}
void SymbolStatic::clear_has_adv_stop() {
  _has_bits_[0] &= ~0x00002000u;
}
void SymbolStatic::clear_adv_stop() {
  adv_stop_ = 0u;
  clear_has_adv_stop();
}
::google::protobuf::uint32 SymbolStatic::adv_stop() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.adv_stop)
  return adv_stop_;
}
void SymbolStatic::set_adv_stop(::google::protobuf::uint32 value) {
  set_has_adv_stop();
  adv_stop_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.adv_stop)
}

// optional uint32 dec_stop = 14;
bool SymbolStatic::has_dec_stop() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SymbolStatic::set_has_dec_stop() {
  _has_bits_[0] |= 0x00004000u;
}
void SymbolStatic::clear_has_dec_stop() {
  _has_bits_[0] &= ~0x00004000u;
}
void SymbolStatic::clear_dec_stop() {
  dec_stop_ = 0u;
  clear_has_dec_stop();
}
::google::protobuf::uint32 SymbolStatic::dec_stop() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.dec_stop)
  return dec_stop_;
}
void SymbolStatic::set_dec_stop(::google::protobuf::uint32 value) {
  set_has_dec_stop();
  dec_stop_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolStatic.dec_stop)
}

// optional .chaos_data.SymbolStatic.SpecMessage spec = 15;
bool SymbolStatic::has_spec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolStatic::set_has_spec() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolStatic::clear_has_spec() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolStatic::clear_spec() {
  if (spec_ != NULL) spec_->::chaos_data::SymbolStatic_SpecMessage::Clear();
  clear_has_spec();
}
const ::chaos_data::SymbolStatic_SpecMessage& SymbolStatic::spec() const {
  const ::chaos_data::SymbolStatic_SpecMessage* p = spec_;
  // @@protoc_insertion_point(field_get:chaos_data.SymbolStatic.spec)
  return p != NULL ? *p : *reinterpret_cast<const ::chaos_data::SymbolStatic_SpecMessage*>(
      &::chaos_data::_SymbolStatic_SpecMessage_default_instance_);
}
::chaos_data::SymbolStatic_SpecMessage* SymbolStatic::mutable_spec() {
  set_has_spec();
  if (spec_ == NULL) {
    spec_ = new ::chaos_data::SymbolStatic_SpecMessage;
  }
  // @@protoc_insertion_point(field_mutable:chaos_data.SymbolStatic.spec)
  return spec_;
}
::chaos_data::SymbolStatic_SpecMessage* SymbolStatic::release_spec() {
  // @@protoc_insertion_point(field_release:chaos_data.SymbolStatic.spec)
  clear_has_spec();
  ::chaos_data::SymbolStatic_SpecMessage* temp = spec_;
  spec_ = NULL;
  return temp;
}
void SymbolStatic::set_allocated_spec(::chaos_data::SymbolStatic_SpecMessage* spec) {
  delete spec_;
  spec_ = spec;
  if (spec) {
    set_has_spec();
  } else {
    clear_has_spec();
  }
  // @@protoc_insertion_point(field_set_allocated:chaos_data.SymbolStatic.spec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chaos_data

// @@protoc_insertion_point(global_scope)
