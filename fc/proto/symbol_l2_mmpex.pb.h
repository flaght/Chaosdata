// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symbol_l2_mmpex.proto

#ifndef PROTOBUF_symbol_5fl2_5fmmpex_2eproto__INCLUDED
#define PROTOBUF_symbol_5fl2_5fmmpex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace chaos_data {
class SymbolL2MMPEX;
class SymbolL2MMPEXDefaultTypeInternal;
extern SymbolL2MMPEXDefaultTypeInternal _SymbolL2MMPEX_default_instance_;
}  // namespace chaos_data

namespace chaos_data {

namespace protobuf_symbol_5fl2_5fmmpex_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_symbol_5fl2_5fmmpex_2eproto

// ===================================================================

class SymbolL2MMPEX : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chaos_data.SymbolL2MMPEX) */ {
 public:
  SymbolL2MMPEX();
  virtual ~SymbolL2MMPEX();

  SymbolL2MMPEX(const SymbolL2MMPEX& from);

  inline SymbolL2MMPEX& operator=(const SymbolL2MMPEX& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymbolL2MMPEX(SymbolL2MMPEX&& from) noexcept
    : SymbolL2MMPEX() {
    *this = ::std::move(from);
  }

  inline SymbolL2MMPEX& operator=(SymbolL2MMPEX&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SymbolL2MMPEX& default_instance();

  static inline const SymbolL2MMPEX* internal_default_instance() {
    return reinterpret_cast<const SymbolL2MMPEX*>(
               &_SymbolL2MMPEX_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SymbolL2MMPEX* other);
  friend void swap(SymbolL2MMPEX& a, SymbolL2MMPEX& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolL2MMPEX* New() const PROTOBUF_FINAL { return New(NULL); }

  SymbolL2MMPEX* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SymbolL2MMPEX& from);
  void MergeFrom(const SymbolL2MMPEX& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SymbolL2MMPEX* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 buy_price = 6;
  int buy_price_size() const;
  void clear_buy_price();
  static const int kBuyPriceFieldNumber = 6;
  ::google::protobuf::uint32 buy_price(int index) const;
  void set_buy_price(int index, ::google::protobuf::uint32 value);
  void add_buy_price(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buy_price() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buy_price();

  // repeated uint32 buy_vol = 7;
  int buy_vol_size() const;
  void clear_buy_vol();
  static const int kBuyVolFieldNumber = 7;
  ::google::protobuf::uint32 buy_vol(int index) const;
  void set_buy_vol(int index, ::google::protobuf::uint32 value);
  void add_buy_vol(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buy_vol() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buy_vol();

  // repeated uint32 sell_price = 8;
  int sell_price_size() const;
  void clear_sell_price();
  static const int kSellPriceFieldNumber = 8;
  ::google::protobuf::uint32 sell_price(int index) const;
  void set_sell_price(int index, ::google::protobuf::uint32 value);
  void add_sell_price(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sell_price() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sell_price();

  // repeated uint32 sell_vol = 9;
  int sell_vol_size() const;
  void clear_sell_vol();
  static const int kSellVolFieldNumber = 9;
  ::google::protobuf::uint32 sell_vol(int index) const;
  void set_sell_vol(int index, ::google::protobuf::uint32 value);
  void add_sell_vol(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sell_vol() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sell_vol();

  // optional uint32 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // optional uint32 avg_buy_price = 2;
  bool has_avg_buy_price() const;
  void clear_avg_buy_price();
  static const int kAvgBuyPriceFieldNumber = 2;
  ::google::protobuf::uint32 avg_buy_price() const;
  void set_avg_buy_price(::google::protobuf::uint32 value);

  // optional uint64 all_buy_vol = 3;
  bool has_all_buy_vol() const;
  void clear_all_buy_vol();
  static const int kAllBuyVolFieldNumber = 3;
  ::google::protobuf::uint64 all_buy_vol() const;
  void set_all_buy_vol(::google::protobuf::uint64 value);

  // optional uint64 all_sell_vol = 5;
  bool has_all_sell_vol() const;
  void clear_all_sell_vol();
  static const int kAllSellVolFieldNumber = 5;
  ::google::protobuf::uint64 all_sell_vol() const;
  void set_all_sell_vol(::google::protobuf::uint64 value);

  // optional uint32 avg_sell_price = 4;
  bool has_avg_sell_price() const;
  void clear_avg_sell_price();
  static const int kAvgSellPriceFieldNumber = 4;
  ::google::protobuf::uint32 avg_sell_price() const;
  void set_avg_sell_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chaos_data.SymbolL2MMPEX)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_avg_buy_price();
  void clear_has_avg_buy_price();
  void set_has_all_buy_vol();
  void clear_has_all_buy_vol();
  void set_has_avg_sell_price();
  void clear_has_avg_sell_price();
  void set_has_all_sell_vol();
  void clear_has_all_sell_vol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buy_price_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buy_vol_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sell_price_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sell_vol_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 avg_buy_price_;
  ::google::protobuf::uint64 all_buy_vol_;
  ::google::protobuf::uint64 all_sell_vol_;
  ::google::protobuf::uint32 avg_sell_price_;
  friend struct protobuf_symbol_5fl2_5fmmpex_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SymbolL2MMPEX

// optional uint32 time = 1;
inline bool SymbolL2MMPEX::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SymbolL2MMPEX::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SymbolL2MMPEX::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SymbolL2MMPEX::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 SymbolL2MMPEX::time() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.time)
  return time_;
}
inline void SymbolL2MMPEX::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.time)
}

// optional uint32 avg_buy_price = 2;
inline bool SymbolL2MMPEX::has_avg_buy_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SymbolL2MMPEX::set_has_avg_buy_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SymbolL2MMPEX::clear_has_avg_buy_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SymbolL2MMPEX::clear_avg_buy_price() {
  avg_buy_price_ = 0u;
  clear_has_avg_buy_price();
}
inline ::google::protobuf::uint32 SymbolL2MMPEX::avg_buy_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.avg_buy_price)
  return avg_buy_price_;
}
inline void SymbolL2MMPEX::set_avg_buy_price(::google::protobuf::uint32 value) {
  set_has_avg_buy_price();
  avg_buy_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.avg_buy_price)
}

// optional uint64 all_buy_vol = 3;
inline bool SymbolL2MMPEX::has_all_buy_vol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SymbolL2MMPEX::set_has_all_buy_vol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SymbolL2MMPEX::clear_has_all_buy_vol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SymbolL2MMPEX::clear_all_buy_vol() {
  all_buy_vol_ = GOOGLE_ULONGLONG(0);
  clear_has_all_buy_vol();
}
inline ::google::protobuf::uint64 SymbolL2MMPEX::all_buy_vol() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.all_buy_vol)
  return all_buy_vol_;
}
inline void SymbolL2MMPEX::set_all_buy_vol(::google::protobuf::uint64 value) {
  set_has_all_buy_vol();
  all_buy_vol_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.all_buy_vol)
}

// optional uint32 avg_sell_price = 4;
inline bool SymbolL2MMPEX::has_avg_sell_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SymbolL2MMPEX::set_has_avg_sell_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SymbolL2MMPEX::clear_has_avg_sell_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SymbolL2MMPEX::clear_avg_sell_price() {
  avg_sell_price_ = 0u;
  clear_has_avg_sell_price();
}
inline ::google::protobuf::uint32 SymbolL2MMPEX::avg_sell_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.avg_sell_price)
  return avg_sell_price_;
}
inline void SymbolL2MMPEX::set_avg_sell_price(::google::protobuf::uint32 value) {
  set_has_avg_sell_price();
  avg_sell_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.avg_sell_price)
}

// optional uint64 all_sell_vol = 5;
inline bool SymbolL2MMPEX::has_all_sell_vol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SymbolL2MMPEX::set_has_all_sell_vol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SymbolL2MMPEX::clear_has_all_sell_vol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SymbolL2MMPEX::clear_all_sell_vol() {
  all_sell_vol_ = GOOGLE_ULONGLONG(0);
  clear_has_all_sell_vol();
}
inline ::google::protobuf::uint64 SymbolL2MMPEX::all_sell_vol() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.all_sell_vol)
  return all_sell_vol_;
}
inline void SymbolL2MMPEX::set_all_sell_vol(::google::protobuf::uint64 value) {
  set_has_all_sell_vol();
  all_sell_vol_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.all_sell_vol)
}

// repeated uint32 buy_price = 6;
inline int SymbolL2MMPEX::buy_price_size() const {
  return buy_price_.size();
}
inline void SymbolL2MMPEX::clear_buy_price() {
  buy_price_.Clear();
}
inline ::google::protobuf::uint32 SymbolL2MMPEX::buy_price(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.buy_price)
  return buy_price_.Get(index);
}
inline void SymbolL2MMPEX::set_buy_price(int index, ::google::protobuf::uint32 value) {
  buy_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.buy_price)
}
inline void SymbolL2MMPEX::add_buy_price(::google::protobuf::uint32 value) {
  buy_price_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.buy_price)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::buy_price() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.buy_price)
  return buy_price_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_buy_price() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.buy_price)
  return &buy_price_;
}

// repeated uint32 buy_vol = 7;
inline int SymbolL2MMPEX::buy_vol_size() const {
  return buy_vol_.size();
}
inline void SymbolL2MMPEX::clear_buy_vol() {
  buy_vol_.Clear();
}
inline ::google::protobuf::uint32 SymbolL2MMPEX::buy_vol(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.buy_vol)
  return buy_vol_.Get(index);
}
inline void SymbolL2MMPEX::set_buy_vol(int index, ::google::protobuf::uint32 value) {
  buy_vol_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.buy_vol)
}
inline void SymbolL2MMPEX::add_buy_vol(::google::protobuf::uint32 value) {
  buy_vol_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.buy_vol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::buy_vol() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.buy_vol)
  return buy_vol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_buy_vol() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.buy_vol)
  return &buy_vol_;
}

// repeated uint32 sell_price = 8;
inline int SymbolL2MMPEX::sell_price_size() const {
  return sell_price_.size();
}
inline void SymbolL2MMPEX::clear_sell_price() {
  sell_price_.Clear();
}
inline ::google::protobuf::uint32 SymbolL2MMPEX::sell_price(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.sell_price)
  return sell_price_.Get(index);
}
inline void SymbolL2MMPEX::set_sell_price(int index, ::google::protobuf::uint32 value) {
  sell_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.sell_price)
}
inline void SymbolL2MMPEX::add_sell_price(::google::protobuf::uint32 value) {
  sell_price_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.sell_price)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::sell_price() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.sell_price)
  return sell_price_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_sell_price() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.sell_price)
  return &sell_price_;
}

// repeated uint32 sell_vol = 9;
inline int SymbolL2MMPEX::sell_vol_size() const {
  return sell_vol_.size();
}
inline void SymbolL2MMPEX::clear_sell_vol() {
  sell_vol_.Clear();
}
inline ::google::protobuf::uint32 SymbolL2MMPEX::sell_vol(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.sell_vol)
  return sell_vol_.Get(index);
}
inline void SymbolL2MMPEX::set_sell_vol(int index, ::google::protobuf::uint32 value) {
  sell_vol_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.sell_vol)
}
inline void SymbolL2MMPEX::add_sell_vol(::google::protobuf::uint32 value) {
  sell_vol_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.sell_vol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::sell_vol() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.sell_vol)
  return sell_vol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_sell_vol() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.sell_vol)
  return &sell_vol_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace chaos_data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_symbol_5fl2_5fmmpex_2eproto__INCLUDED
