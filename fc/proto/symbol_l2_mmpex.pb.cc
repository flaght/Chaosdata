// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symbol_l2_mmpex.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "symbol_l2_mmpex.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chaos_data {
class SymbolL2MMPEXDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SymbolL2MMPEX>
     _instance;
} _SymbolL2MMPEX_default_instance_;

namespace protobuf_symbol_5fl2_5fmmpex_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, avg_buy_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, all_buy_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, avg_sell_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, all_sell_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, buy_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, buy_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, sell_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolL2MMPEX, sell_vol_),
  0,
  1,
  2,
  4,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(SymbolL2MMPEX)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolL2MMPEX_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "symbol_l2_mmpex.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SymbolL2MMPEX_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SymbolL2MMPEX_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025symbol_l2_mmpex.proto\022\nchaos_data\"\301\001\n\r"
      "SymbolL2MMPEX\022\014\n\004time\030\001 \001(\r\022\025\n\ravg_buy_p"
      "rice\030\002 \001(\r\022\023\n\013all_buy_vol\030\003 \001(\004\022\026\n\016avg_s"
      "ell_price\030\004 \001(\r\022\024\n\014all_sell_vol\030\005 \001(\004\022\021\n"
      "\tbuy_price\030\006 \003(\r\022\017\n\007buy_vol\030\007 \003(\r\022\022\n\nsel"
      "l_price\030\010 \003(\r\022\020\n\010sell_vol\030\t \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "symbol_l2_mmpex.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_symbol_5fl2_5fmmpex_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolL2MMPEX::kTimeFieldNumber;
const int SymbolL2MMPEX::kAvgBuyPriceFieldNumber;
const int SymbolL2MMPEX::kAllBuyVolFieldNumber;
const int SymbolL2MMPEX::kAvgSellPriceFieldNumber;
const int SymbolL2MMPEX::kAllSellVolFieldNumber;
const int SymbolL2MMPEX::kBuyPriceFieldNumber;
const int SymbolL2MMPEX::kBuyVolFieldNumber;
const int SymbolL2MMPEX::kSellPriceFieldNumber;
const int SymbolL2MMPEX::kSellVolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolL2MMPEX::SymbolL2MMPEX()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_symbol_5fl2_5fmmpex_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chaos_data.SymbolL2MMPEX)
}
SymbolL2MMPEX::SymbolL2MMPEX(const SymbolL2MMPEX& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      buy_price_(from.buy_price_),
      buy_vol_(from.buy_vol_),
      sell_price_(from.sell_price_),
      sell_vol_(from.sell_vol_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_sell_price_) -
    reinterpret_cast<char*>(&time_)) + sizeof(avg_sell_price_));
  // @@protoc_insertion_point(copy_constructor:chaos_data.SymbolL2MMPEX)
}

void SymbolL2MMPEX::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_sell_price_) -
      reinterpret_cast<char*>(&time_)) + sizeof(avg_sell_price_));
}

SymbolL2MMPEX::~SymbolL2MMPEX() {
  // @@protoc_insertion_point(destructor:chaos_data.SymbolL2MMPEX)
  SharedDtor();
}

void SymbolL2MMPEX::SharedDtor() {
}

void SymbolL2MMPEX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolL2MMPEX::descriptor() {
  protobuf_symbol_5fl2_5fmmpex_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fl2_5fmmpex_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolL2MMPEX& SymbolL2MMPEX::default_instance() {
  protobuf_symbol_5fl2_5fmmpex_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolL2MMPEX* SymbolL2MMPEX::New(::google::protobuf::Arena* arena) const {
  SymbolL2MMPEX* n = new SymbolL2MMPEX;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolL2MMPEX::Clear() {
// @@protoc_insertion_point(message_clear_start:chaos_data.SymbolL2MMPEX)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_price_.Clear();
  buy_vol_.Clear();
  sell_price_.Clear();
  sell_vol_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_sell_price_) -
        reinterpret_cast<char*>(&time_)) + sizeof(avg_sell_price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolL2MMPEX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chaos_data.SymbolL2MMPEX)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_buy_price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_avg_buy_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_buy_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 all_buy_vol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_all_buy_vol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_buy_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_sell_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_avg_sell_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_sell_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 all_sell_vol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_all_sell_vol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_sell_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 buy_price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_buy_price())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buy_price())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 buy_vol = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_buy_vol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buy_vol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sell_price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_sell_price())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sell_price())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sell_vol = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_sell_vol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sell_vol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chaos_data.SymbolL2MMPEX)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chaos_data.SymbolL2MMPEX)
  return false;
#undef DO_
}

void SymbolL2MMPEX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chaos_data.SymbolL2MMPEX)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 avg_buy_price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avg_buy_price(), output);
  }

  // optional uint64 all_buy_vol = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->all_buy_vol(), output);
  }

  // optional uint32 avg_sell_price = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avg_sell_price(), output);
  }

  // optional uint64 all_sell_vol = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->all_sell_vol(), output);
  }

  // repeated uint32 buy_price = 6;
  for (int i = 0, n = this->buy_price_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->buy_price(i), output);
  }

  // repeated uint32 buy_vol = 7;
  for (int i = 0, n = this->buy_vol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->buy_vol(i), output);
  }

  // repeated uint32 sell_price = 8;
  for (int i = 0, n = this->sell_price_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->sell_price(i), output);
  }

  // repeated uint32 sell_vol = 9;
  for (int i = 0, n = this->sell_vol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->sell_vol(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chaos_data.SymbolL2MMPEX)
}

::google::protobuf::uint8* SymbolL2MMPEX::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chaos_data.SymbolL2MMPEX)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint32 avg_buy_price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avg_buy_price(), target);
  }

  // optional uint64 all_buy_vol = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->all_buy_vol(), target);
  }

  // optional uint32 avg_sell_price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avg_sell_price(), target);
  }

  // optional uint64 all_sell_vol = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->all_sell_vol(), target);
  }

  // repeated uint32 buy_price = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->buy_price_, target);

  // repeated uint32 buy_vol = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->buy_vol_, target);

  // repeated uint32 sell_price = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->sell_price_, target);

  // repeated uint32 sell_vol = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->sell_vol_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaos_data.SymbolL2MMPEX)
  return target;
}

size_t SymbolL2MMPEX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaos_data.SymbolL2MMPEX)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 buy_price = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->buy_price_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->buy_price_size());
    total_size += data_size;
  }

  // repeated uint32 buy_vol = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->buy_vol_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->buy_vol_size());
    total_size += data_size;
  }

  // repeated uint32 sell_price = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sell_price_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sell_price_size());
    total_size += data_size;
  }

  // repeated uint32 sell_vol = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sell_vol_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sell_vol_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 avg_buy_price = 2;
    if (has_avg_buy_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_buy_price());
    }

    // optional uint64 all_buy_vol = 3;
    if (has_all_buy_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_buy_vol());
    }

    // optional uint64 all_sell_vol = 5;
    if (has_all_sell_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_sell_vol());
    }

    // optional uint32 avg_sell_price = 4;
    if (has_avg_sell_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_sell_price());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolL2MMPEX::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chaos_data.SymbolL2MMPEX)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolL2MMPEX* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolL2MMPEX>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chaos_data.SymbolL2MMPEX)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chaos_data.SymbolL2MMPEX)
    MergeFrom(*source);
  }
}

void SymbolL2MMPEX::MergeFrom(const SymbolL2MMPEX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaos_data.SymbolL2MMPEX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_price_.MergeFrom(from.buy_price_);
  buy_vol_.MergeFrom(from.buy_vol_);
  sell_price_.MergeFrom(from.sell_price_);
  sell_vol_.MergeFrom(from.sell_vol_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      avg_buy_price_ = from.avg_buy_price_;
    }
    if (cached_has_bits & 0x00000004u) {
      all_buy_vol_ = from.all_buy_vol_;
    }
    if (cached_has_bits & 0x00000008u) {
      all_sell_vol_ = from.all_sell_vol_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_sell_price_ = from.avg_sell_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolL2MMPEX::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chaos_data.SymbolL2MMPEX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolL2MMPEX::CopyFrom(const SymbolL2MMPEX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaos_data.SymbolL2MMPEX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolL2MMPEX::IsInitialized() const {
  return true;
}

void SymbolL2MMPEX::Swap(SymbolL2MMPEX* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolL2MMPEX::InternalSwap(SymbolL2MMPEX* other) {
  using std::swap;
  buy_price_.InternalSwap(&other->buy_price_);
  buy_vol_.InternalSwap(&other->buy_vol_);
  sell_price_.InternalSwap(&other->sell_price_);
  sell_vol_.InternalSwap(&other->sell_vol_);
  swap(time_, other->time_);
  swap(avg_buy_price_, other->avg_buy_price_);
  swap(all_buy_vol_, other->all_buy_vol_);
  swap(all_sell_vol_, other->all_sell_vol_);
  swap(avg_sell_price_, other->avg_sell_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolL2MMPEX::GetMetadata() const {
  protobuf_symbol_5fl2_5fmmpex_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_symbol_5fl2_5fmmpex_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolL2MMPEX

// optional uint32 time = 1;
bool SymbolL2MMPEX::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolL2MMPEX::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolL2MMPEX::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolL2MMPEX::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 SymbolL2MMPEX::time() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.time)
  return time_;
}
void SymbolL2MMPEX::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.time)
}

// optional uint32 avg_buy_price = 2;
bool SymbolL2MMPEX::has_avg_buy_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SymbolL2MMPEX::set_has_avg_buy_price() {
  _has_bits_[0] |= 0x00000002u;
}
void SymbolL2MMPEX::clear_has_avg_buy_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void SymbolL2MMPEX::clear_avg_buy_price() {
  avg_buy_price_ = 0u;
  clear_has_avg_buy_price();
}
::google::protobuf::uint32 SymbolL2MMPEX::avg_buy_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.avg_buy_price)
  return avg_buy_price_;
}
void SymbolL2MMPEX::set_avg_buy_price(::google::protobuf::uint32 value) {
  set_has_avg_buy_price();
  avg_buy_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.avg_buy_price)
}

// optional uint64 all_buy_vol = 3;
bool SymbolL2MMPEX::has_all_buy_vol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SymbolL2MMPEX::set_has_all_buy_vol() {
  _has_bits_[0] |= 0x00000004u;
}
void SymbolL2MMPEX::clear_has_all_buy_vol() {
  _has_bits_[0] &= ~0x00000004u;
}
void SymbolL2MMPEX::clear_all_buy_vol() {
  all_buy_vol_ = GOOGLE_ULONGLONG(0);
  clear_has_all_buy_vol();
}
::google::protobuf::uint64 SymbolL2MMPEX::all_buy_vol() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.all_buy_vol)
  return all_buy_vol_;
}
void SymbolL2MMPEX::set_all_buy_vol(::google::protobuf::uint64 value) {
  set_has_all_buy_vol();
  all_buy_vol_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.all_buy_vol)
}

// optional uint32 avg_sell_price = 4;
bool SymbolL2MMPEX::has_avg_sell_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SymbolL2MMPEX::set_has_avg_sell_price() {
  _has_bits_[0] |= 0x00000010u;
}
void SymbolL2MMPEX::clear_has_avg_sell_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void SymbolL2MMPEX::clear_avg_sell_price() {
  avg_sell_price_ = 0u;
  clear_has_avg_sell_price();
}
::google::protobuf::uint32 SymbolL2MMPEX::avg_sell_price() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.avg_sell_price)
  return avg_sell_price_;
}
void SymbolL2MMPEX::set_avg_sell_price(::google::protobuf::uint32 value) {
  set_has_avg_sell_price();
  avg_sell_price_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.avg_sell_price)
}

// optional uint64 all_sell_vol = 5;
bool SymbolL2MMPEX::has_all_sell_vol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SymbolL2MMPEX::set_has_all_sell_vol() {
  _has_bits_[0] |= 0x00000008u;
}
void SymbolL2MMPEX::clear_has_all_sell_vol() {
  _has_bits_[0] &= ~0x00000008u;
}
void SymbolL2MMPEX::clear_all_sell_vol() {
  all_sell_vol_ = GOOGLE_ULONGLONG(0);
  clear_has_all_sell_vol();
}
::google::protobuf::uint64 SymbolL2MMPEX::all_sell_vol() const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.all_sell_vol)
  return all_sell_vol_;
}
void SymbolL2MMPEX::set_all_sell_vol(::google::protobuf::uint64 value) {
  set_has_all_sell_vol();
  all_sell_vol_ = value;
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.all_sell_vol)
}

// repeated uint32 buy_price = 6;
int SymbolL2MMPEX::buy_price_size() const {
  return buy_price_.size();
}
void SymbolL2MMPEX::clear_buy_price() {
  buy_price_.Clear();
}
::google::protobuf::uint32 SymbolL2MMPEX::buy_price(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.buy_price)
  return buy_price_.Get(index);
}
void SymbolL2MMPEX::set_buy_price(int index, ::google::protobuf::uint32 value) {
  buy_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.buy_price)
}
void SymbolL2MMPEX::add_buy_price(::google::protobuf::uint32 value) {
  buy_price_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.buy_price)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::buy_price() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.buy_price)
  return buy_price_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_buy_price() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.buy_price)
  return &buy_price_;
}

// repeated uint32 buy_vol = 7;
int SymbolL2MMPEX::buy_vol_size() const {
  return buy_vol_.size();
}
void SymbolL2MMPEX::clear_buy_vol() {
  buy_vol_.Clear();
}
::google::protobuf::uint32 SymbolL2MMPEX::buy_vol(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.buy_vol)
  return buy_vol_.Get(index);
}
void SymbolL2MMPEX::set_buy_vol(int index, ::google::protobuf::uint32 value) {
  buy_vol_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.buy_vol)
}
void SymbolL2MMPEX::add_buy_vol(::google::protobuf::uint32 value) {
  buy_vol_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.buy_vol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::buy_vol() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.buy_vol)
  return buy_vol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_buy_vol() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.buy_vol)
  return &buy_vol_;
}

// repeated uint32 sell_price = 8;
int SymbolL2MMPEX::sell_price_size() const {
  return sell_price_.size();
}
void SymbolL2MMPEX::clear_sell_price() {
  sell_price_.Clear();
}
::google::protobuf::uint32 SymbolL2MMPEX::sell_price(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.sell_price)
  return sell_price_.Get(index);
}
void SymbolL2MMPEX::set_sell_price(int index, ::google::protobuf::uint32 value) {
  sell_price_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.sell_price)
}
void SymbolL2MMPEX::add_sell_price(::google::protobuf::uint32 value) {
  sell_price_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.sell_price)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::sell_price() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.sell_price)
  return sell_price_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_sell_price() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.sell_price)
  return &sell_price_;
}

// repeated uint32 sell_vol = 9;
int SymbolL2MMPEX::sell_vol_size() const {
  return sell_vol_.size();
}
void SymbolL2MMPEX::clear_sell_vol() {
  sell_vol_.Clear();
}
::google::protobuf::uint32 SymbolL2MMPEX::sell_vol(int index) const {
  // @@protoc_insertion_point(field_get:chaos_data.SymbolL2MMPEX.sell_vol)
  return sell_vol_.Get(index);
}
void SymbolL2MMPEX::set_sell_vol(int index, ::google::protobuf::uint32 value) {
  sell_vol_.Set(index, value);
  // @@protoc_insertion_point(field_set:chaos_data.SymbolL2MMPEX.sell_vol)
}
void SymbolL2MMPEX::add_sell_vol(::google::protobuf::uint32 value) {
  sell_vol_.Add(value);
  // @@protoc_insertion_point(field_add:chaos_data.SymbolL2MMPEX.sell_vol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SymbolL2MMPEX::sell_vol() const {
  // @@protoc_insertion_point(field_list:chaos_data.SymbolL2MMPEX.sell_vol)
  return sell_vol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SymbolL2MMPEX::mutable_sell_vol() {
  // @@protoc_insertion_point(field_mutable_list:chaos_data.SymbolL2MMPEX.sell_vol)
  return &sell_vol_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chaos_data

// @@protoc_insertion_point(global_scope)
