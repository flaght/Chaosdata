package chaos_data; message SymbolStatic {
	enum SYMBOL_TYPE{
		INDEX = 0;				  //指数
		STOCK = 1;				  //股票
		FUND = 2;				    //基金
		BOND = 3;				    //债券
		OTHER_STOCK = 4 ;		//其它股票
		OPTION = 5;		        //选择权
		EXCHANGE = 6;			  //外汇
		FUTURE = 7;				  //期货
		FTR_IDX = 8;			  //期指
		RGZ = 9;				    //认购证
		ETF = 10;				    //ETF
		LOF = 11;				    //LOF
		COV_BOND = 12;			//可转债
		TRUST = 13;				  //信托
		WARRANT = 14;			  //权证
		REPO = 15;				  //回购
		COMM = 16;				  //商品现货
	}
	
	enum SYMBOL_SUBTYPE{ //程序中需转acsii
		NILTYPE = 0;
		ASHARE	= 65;			//A股,仅对STOCK,WARRANT有效
		BSHARE	= 66;			//B股,仅对STOCK,WARRANT有效
		GOV_BOND = 71;		//国债,仅对BOND有效
		ENT_BOND = 79;		//企业债,仅对BOND有效
		FIN_BOND = 70;		//金融债,仅对BOND有效
	}
	
	enum SYMBOL_SP{//股票属性 程序中需转成acsii
		NULLSP = 0;
		NSP	= 78;//正常
		SSP	= 83;//ST股
		PSP = 80;//PT股
		TSP = 84;//代办转让证券
		LSP = 76;//上市开放型基金（LOF）
		OSP = 79;//仅揭示净值的开放式基金
		FSP = 70;//非交易型开放式基金
		ESP = 69;//ETF
		ZSP = 90;//处于退市整理期的证券
	}
	
	optional bytes         		symbol = 1; //标的代码
	optional bytes         		name = 2; //标的名称
	optional SYMBOL_TYPE   		ctype = 3;//TYPE
	optional SYMBOL_SUBTYPE 		csub_type = 4; //SYMBOL_SUBTYPE
    optional bytes              market_mtk = 5;//交易所
    optional uint32             market_date = 6;//日期
    optional uint32             his_count = 7;//数据个数
	optional uint32        		price_digit = 8; //价格最小分辨率，非常重要，每一个DWORD类型的价格都要除以10^m_nPriceDigit才是真正的价格
	optional int32         		vol_unit = 9; //成交量单位，每一成交量单位表示多少股
	optional int64  				float_issued = 10;//流通股本
	optional int64  				total_issued = 11;//总股本
	optional uint32 				last_close = 12; //昨收
	optional uint32 				adv_stop = 13; //涨停
	optional uint32 				dec_stop = 14; //跌停	
	message  EquityMessage { //股票	(STOCK,OTHER_STOCK)
		optional float       face_value = 1; //面值
		optional float       profit = 2; //每股收益
		optional uint32	     industry = 3;		//	行业'A' -- 'M',参见 industryClasify
		optional int32       trade_status = 4; // 'N'=Normal, 'H'=Halt, 'X'=Not trade on this Market
		optional float       cash_dividend = 5;	//	每股红利
		optional SYMBOL_SP   security_properties = 6; //特殊分类标记，取值集合SYMBOL_SP中的值
		optional uint32      last_tradedate = 7;//最后交易日，目前为空，做预留用
	}

  	message FundMessage { //基金,ETF,LOF	(FUND,ETF,LOF)
  		optional float face_value = 1; //面值
  		optional float total_issued = 2; //总股本
  		optional float iopv = 3;			//	IOPV净值,仅对ETF,LOF有效
  	}

  	message WarranMessage {//权证,选择权	(OPTION,WARRANT)
  		optional int32	style = 1;			//  'A' or 'E'	American or European Style
    		optional int32	cp = 2;				//	'C' or 'P' Call or Put
    		optional float	cnvt_ratio = 3;		//  兑换/行权比例
    		optional float	strike_price = 4;		//	行权价格
    		optional uint32	maturity_date = 5;	//	到期日,YYYYMMDD
    		optional bytes	under_line = 6;	//	对应股票,包含市场代码，如SH600000
    		optional float	balance = 7;			//  流通余额
    	}

    	message BoundMessage	{//债券	(BOND)
    		optional uint32	maturity_date = 1;	//	到期日,YYYYMMDD
    		optional uint32	intaccru_date = 2;	//	起息日，YYYYMMDD
    		optional float	isssue_price = 3;		//	发行价
    		optional float	coupon_rate = 4;		//	利率
    		optional float	face_value = 5;		//	面值
    		optional float	accrued_int = 6;		//	应计利息,***
    	}

    	message CNVTMessage	{	//可转债	(COV_BOND)
    		optional int32	style = 1;			//  'A' or 'E'	American or European Style
    		optional int32	cp = 2;				  //	'C' or 'P' Call or Put
    		optional float	cnvt_ratio = 3;		//  兑换/行权比例
    		optional float	strike_price = 4;		//	行权价格
    		optional uint32	maturity_date = 5;	//	到期日,YYYYMMDD
    		optional bytes	under_line = 6;	   //	对应股票,包含市场代码，如SH600000
    		optional float	accrued_int = 7;		//	应计利息
  	}

  	message FutureMessage {		//期货,商品	(FUTURE,FTR_IDX,COMM)
  		optional uint32	last_day_OI = 1;			//昨日持仓量
  		optional float	last_settle_price = 2;		//昨日结算价
    }

    message TruestMessage {		//信托	(TRUST)
    		optional float	asset = 3;			//净资产
    		optional uint32	asset_date = 4;		//YYYYMMDD
    }

    message SpecMessage {
    		optional EquityMessage equity = 1;
    		optional FundMessage fund = 2;
    		optional WarranMessage warran = 3;
    		optional BoundMessage  bound = 4;
    		optional CNVTMessage cnvt = 5;
    		optional FutureMessage future = 6;
    		optional TruestMessage truest = 7;
    }

    optional SpecMessage spec = 15;
	
}

